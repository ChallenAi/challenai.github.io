<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>storage on Lun Jiang</title>
    <link>https://challenai.github.io/tags/storage/</link>
    <description>Recent content in storage on Lun Jiang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>© 2023 Lun Jiang</copyright>
    <lastBuildDate>Sat, 17 Jun 2023 15:20:29 +0800</lastBuildDate><atom:link href="https://challenai.github.io/tags/storage/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Build Cache from Scratch: 5. TCP cache server</title>
      <link>https://challenai.github.io/contribute/cache/wtfcache5/</link>
      <pubDate>Sat, 17 Jun 2023 15:20:29 +0800</pubDate>
      
      <guid>https://challenai.github.io/contribute/cache/wtfcache5/</guid>
      <description>build a high performance cache from scratch.</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://challenai.github.io/contribute/cache/wtfcache5/cover.jpg" />
    </item>
    
    <item>
      <title>Build Cache from Scratch: 4. HTTP cache server</title>
      <link>https://challenai.github.io/contribute/cache/wtfcache4/</link>
      <pubDate>Fri, 16 Jun 2023 12:12:11 +0800</pubDate>
      
      <guid>https://challenai.github.io/contribute/cache/wtfcache4/</guid>
      <description>build a high performance cache from scratch.</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://challenai.github.io/contribute/cache/wtfcache4/cover.jpg" />
    </item>
    
    <item>
      <title>Build Cache from Scratch: 3. Cache core implementation</title>
      <link>https://challenai.github.io/contribute/cache/wtfcache3/</link>
      <pubDate>Fri, 16 Jun 2023 11:52:11 +0800</pubDate>
      
      <guid>https://challenai.github.io/contribute/cache/wtfcache3/</guid>
      <description>build a high performance cache from scratch.</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://challenai.github.io/contribute/cache/wtfcache3/cover.jpg" />
    </item>
    
    <item>
      <title>Build Cache from Scratch: 2. initialize project</title>
      <link>https://challenai.github.io/contribute/cache/wtfcache2/</link>
      <pubDate>Fri, 16 Jun 2023 11:32:11 +0800</pubDate>
      
      <guid>https://challenai.github.io/contribute/cache/wtfcache2/</guid>
      <description>build a high performance cache from scratch.</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://challenai.github.io/contribute/cache/wtfcache2/cover.jpg" />
    </item>
    
    <item>
      <title>Build Cache from Scratch: 1. introduction</title>
      <link>https://challenai.github.io/contribute/cache/wtfcache1/</link>
      <pubDate>Sat, 18 Mar 2023 14:32:19 +0800</pubDate>
      
      <guid>https://challenai.github.io/contribute/cache/wtfcache1/</guid>
      <description>build a high performance cache from scratch.</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://challenai.github.io/contribute/cache/wtfcache1/cover.jpg" />
    </item>
    
    <item>
      <title>Storage Engine: from Primitives to Implementation</title>
      <link>https://challenai.github.io/contribute/storage/</link>
      <pubDate>Thu, 16 Feb 2023 22:00:39 +0800</pubDate>
      
      <guid>https://challenai.github.io/contribute/storage/</guid>
      <description>work in progress</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://challenai.github.io/contribute/storage/cover.webp" />
    </item>
    
    <item>
      <title>Queue: Nats, Connectivity and Edge</title>
      <link>https://challenai.github.io/contribute/nats/</link>
      <pubDate>Mon, 13 Feb 2023 18:08:19 +0800</pubDate>
      
      <guid>https://challenai.github.io/contribute/nats/</guid>
      <description>Message Queue is a separate server to store message with FIFO sequence. Nats is a high performance message queue written in golang, it introduces some interesting ideas like connectivity, edge</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://challenai.github.io/contribute/nats/cover.jpg" />
    </item>
    
    <item>
      <title>分布式键值存储系统的设计与实现</title>
      <link>https://challenai.github.io/paper/kvstore/</link>
      <pubDate>Sat, 15 May 2021 12:08:19 +0800</pubDate>
      
      <guid>https://challenai.github.io/paper/kvstore/</guid>
      <description>键值数据库数据分片的方法通常有根据键的范围分片和根据键的散列分片，根据键的范围分片通常给每个分片指定一块连续的键范围，然后将特定键保存到指定分片。根据键的散列分片则有助于数据的平衡分配，避免出现热点，但是也丧失了高效范围查询的能力。</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://challenai.github.io/paper/kvstore/cover.png" />
    </item>
    
  </channel>
</rss>
