<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TLS on Challen</title>
    <link>/tags/tls/</link>
    <description>Recent content in TLS on Challen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>ChallenAi</copyright>
    <lastBuildDate>Thu, 22 Apr 2021 07:48:16 +0800</lastBuildDate><atom:link href="/tags/tls/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HTTPS/SSL/TLS</title>
      <link>/posts/tech/network/</link>
      <pubDate>Thu, 22 Apr 2021 07:48:16 +0800</pubDate>
      
      <guid>/posts/tech/network/</guid>
      <description>HTTPS/SSL/TLS 需要使用加密的http连接，就需要证书和私钥 私钥服务器持有，证书(公钥)分发出去 然后公钥加密对称加密的秘钥(生成的一串随机数) 最后双方通信使用对称加密。两边都持有对称加密的秘钥
https证书生成： 1、生成RSA密钥的方法 openssl genrsa -des3 -out key.pem 2048 这个命令会生成一个2048位的密钥，同时有一个des3方法加密的密码，如果你不想要每次都输入密码，可以改成： openssl genrsa -out key.pem 2048 建议用2048位密钥，少于此可能会不安全或很快将不安全。 2、生成一个证书请求 openssl req -new -key key.pem -out cert.csr 这个命令将会生成一个证书请求，当然，用到了前面生成的密钥key.pem文件 这里将生成一个新的文件cert.csr，即一个证书请求文件，你可以拿着这个文件去数字证书颁发机构（即CA）申请一个数字证书。CA会给你一个新的文件cert.pem，那才是你的数字证书。 如果是自己做测试，那么证书的申请机构和颁发机构都是自己。就可以用下面这个命令来生成证书： openssl req -new -x509 -key key.pem -out cert.pem -days 1095 这个命令将用上面生成的密钥key.pem生成一个数字证书cert.pem 3、使用数字证书和密钥 有了key.pem和cert.pem文件后就可以在自己的程序中使用了，比如做一个加密通讯的服务器 上述是讲解的详情，如果我们要生成私钥用于测试本地https(该命令来自nodejs文档https部分):
openssl req -x509 -newkey rsa:2048 -nodes -sha256 -subj &amp;#39;/CN=localhost&amp;#39; \  -keyout key.pem -out cert.pem 然后将cert.pem(公钥)，key.pem(私钥)放到index.js或nginx.conf目录即可：
const http2 = require(&amp;#39;http2&amp;#39;); const fs = require(&amp;#39;fs&amp;#39;); const server = http2.</description>
      <content>&lt;h3 id=&#34;httpsssltls&#34;&gt;HTTPS/SSL/TLS&lt;/h3&gt;
&lt;p&gt;需要使用加密的http连接，就需要证书和私钥
私钥服务器持有，证书(公钥)分发出去
然后公钥加密对称加密的秘钥(生成的一串随机数)
最后双方通信使用对称加密。两边都持有对称加密的秘钥&lt;/p&gt;
&lt;h4 id=&#34;https证书生成&#34;&gt;https证书生成：&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;1、生成RSA密钥的方法 
openssl genrsa -des3 -out key.pem 2048 
这个命令会生成一个2048位的密钥，同时有一个des3方法加密的密码，如果你不想要每次都输入密码，可以改成： 
openssl genrsa -out key.pem 2048 
建议用2048位密钥，少于此可能会不安全或很快将不安全。 

2、生成一个证书请求 
openssl req -new -key key.pem -out cert.csr 
这个命令将会生成一个证书请求，当然，用到了前面生成的密钥key.pem文件 
这里将生成一个新的文件cert.csr，即一个证书请求文件，你可以拿着这个文件去数字证书颁发机构（即CA）申请一个数字证书。CA会给你一个新的文件cert.pem，那才是你的数字证书。 

如果是自己做测试，那么证书的申请机构和颁发机构都是自己。就可以用下面这个命令来生成证书： 
openssl req -new -x509 -key key.pem -out cert.pem -days 1095 
这个命令将用上面生成的密钥key.pem生成一个数字证书cert.pem 

3、使用数字证书和密钥 
有了key.pem和cert.pem文件后就可以在自己的程序中使用了，比如做一个加密通讯的服务器
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述是讲解的详情，如果我们要生成私钥用于测试本地https(该命令来自nodejs文档https部分):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;openssl req -x509 -newkey rsa:2048 -nodes -sha256 -subj &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/CN=localhost&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -keyout key.pem -out cert.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后将cert.pem(公钥)，key.pem(私钥)放到index.js或nginx.conf目录即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http2&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;createSecureServer&lt;/span&gt;({
    &lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fs&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;readFileSync&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;key.pem&amp;#39;&lt;/span&gt;),
    &lt;span style=&#34;color:#a6e22e&#34;&gt;cert&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fs&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;readFileSync&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cert.pem&amp;#39;&lt;/span&gt;)
});
&lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;));

&lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;stream&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;headers&lt;/span&gt;) =&amp;gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;// 流是一个双工流。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;respond&lt;/span&gt;({
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;content-type&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text/html; charset=utf-8&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:status&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;
    });
    &lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;h1&amp;gt;你好世界&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;);
});

&lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;8443&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于nginx.conf，这里以http2为例，因为http2强制使用https:&lt;/p&gt;
&lt;p&gt;值得一提的是http2依然可以proxy到http1.1的服务器&lt;/p&gt;
&lt;p&gt;(因为http2解决了队头阻塞问题和二进制传输，所以只要客户端和网关间建立http2连接即可,不必内部完全是http2,nginx暂时持有http2 frame，最后组成http文本头传给服务器)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;server {
    listen       443 ssl http2;
    server_name  hostname.com;

    ssl_certificate   cert/cert.pem;
    ssl_certificate_key  cert/key.pem;

    location / {
        proxy_pass http://localhost:12345;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;chrome不受信任的连接问题&#34;&gt;chrome不受信任的连接问题&lt;/h4&gt;
&lt;p&gt;根据TLS(安全传输层)原理，客户端必须有证书。&lt;/p&gt;
&lt;p&gt;mac系统里，打开钥匙链app(keychain access)，然后file-&amp;gt;import item来导入cert.pem&lt;/p&gt;
&lt;p&gt;导入后，双击该证书，设置信任该证书。&lt;/p&gt;
&lt;p&gt;然后访问https://localhost即可。&lt;/p&gt;
&lt;h4 id=&#34;自动https支持auto-tls&#34;&gt;自动HTTPS支持：auto TLS&lt;/h4&gt;
&lt;p&gt;caddy&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
