<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>code on Lun Jiang</title>
    <link>https://challenai.github.io/tags/code/</link>
    <description>Recent content in code on Lun Jiang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Â© 2023 Lun Jiang</copyright>
    <lastBuildDate>Mon, 24 Jun 2024 12:33:12 +0800</lastBuildDate><atom:link href="https://challenai.github.io/tags/code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Build Cache from Scratch: 6. observe our service</title>
      <link>https://challenai.github.io/contribute/cache/wtfcache6/</link>
      <pubDate>Mon, 24 Jun 2024 12:33:12 +0800</pubDate>
      
      <guid>https://challenai.github.io/contribute/cache/wtfcache6/</guid>
      <description>If we meet some performance issue, we need some information of our server to help us improve.</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://challenai.github.io/contribute/cache/wtfcache6/cover.jpg" />
    </item>
    
    <item>
      <title>Build Cache from Scratch: 5. TCP cache server</title>
      <link>https://challenai.github.io/contribute/cache/wtfcache5/</link>
      <pubDate>Sun, 23 Jun 2024 14:12:29 +0800</pubDate>
      
      <guid>https://challenai.github.io/contribute/cache/wtfcache5/</guid>
      <description>Different from HTTP protocol, we build TCP service from scratch without any framework</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://challenai.github.io/contribute/cache/wtfcache5/cover.jpg" />
    </item>
    
    <item>
      <title>Build Cache from Scratch: 4. HTTP cache server</title>
      <link>https://challenai.github.io/contribute/cache/wtfcache4/</link>
      <pubDate>Mon, 17 Jun 2024 12:12:11 +0800</pubDate>
      
      <guid>https://challenai.github.io/contribute/cache/wtfcache4/</guid>
      <description>There are different ways to expose HTTP API in golang</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://challenai.github.io/contribute/cache/wtfcache4/cover.jpg" />
    </item>
    
    <item>
      <title>Build Cache from Scratch: 3. Cache core implementation</title>
      <link>https://challenai.github.io/contribute/cache/wtfcache3/</link>
      <pubDate>Sun, 16 Jun 2024 11:52:11 +0800</pubDate>
      
      <guid>https://challenai.github.io/contribute/cache/wtfcache3/</guid>
      <description>cache is somewhere we can store data. We usually find data by its ID, or key</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://challenai.github.io/contribute/cache/wtfcache3/cover.jpg" />
    </item>
    
    <item>
      <title>Build Cache from Scratch: 2. initialize project</title>
      <link>https://challenai.github.io/contribute/cache/wtfcache2/</link>
      <pubDate>Sun, 16 Jun 2024 11:32:11 +0800</pubDate>
      
      <guid>https://challenai.github.io/contribute/cache/wtfcache2/</guid>
      <description>build a high performance cache from scratch.</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://challenai.github.io/contribute/cache/wtfcache2/cover.jpg" />
    </item>
    
    <item>
      <title>Build Cache from Scratch: 1. introduction</title>
      <link>https://challenai.github.io/contribute/cache/wtfcache1/</link>
      <pubDate>Sat, 18 Mar 2023 14:32:19 +0800</pubDate>
      
      <guid>https://challenai.github.io/contribute/cache/wtfcache1/</guid>
      <description>before we start, we should figure out our final requirements and prepare the environment.</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="https://challenai.github.io/contribute/cache/wtfcache1/cover.jpg" />
    </item>
    
  </channel>
</rss>
