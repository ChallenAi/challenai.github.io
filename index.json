[{"content":"","date":"12 February 2023","permalink":"/about/","section":"Lun Jiang","summary":"","title":"About"},{"content":"","date":"12 February 2023","permalink":"/tags/consensus/","section":"Tags","summary":"","title":"consensus"},{"content":"","date":"12 February 2023","permalink":"/tags/distributed-system/","section":"Tags","summary":"","title":"distributed system"},{"content":"","date":"12 February 2023","permalink":"/tags/fault-tolerant/","section":"Tags","summary":"","title":"fault tolerant"},{"content":"","date":"12 February 2023","permalink":"/","section":"Lun Jiang","summary":"","title":"Lun Jiang"},{"content":"","date":"12 February 2023","permalink":"/paper/gfs/","section":"Posts","summary":"","title":"Paper: Google File System"},{"content":" Original: \u0026ldquo;The Design of a Practical System for Fault-Tolerant Virtual Machines\u0026rdquo;\nAuthors: Daniel J. Scales, Mike Nelson, and Ganesh Venkitachalam VMware, Inc{scales,mnelson,ganesh}@vmware.com\n introduce introduce # This paper (virtual machine fault tolerant) I think is one of the best paper for someone who wants to step into distributed system. It provides some basic opinions about how to replicate state.\nbackground background # The background of this paper is to design a fault tolerant virtual machine service, and the most common idea for fault tolerant is to replicate, so they talk about how to replicate computation.\nIf these terminology sounds a bit scare, like what the f**k they are? can you just say something more understandable like what a human can figure out, don\u0026rsquo;t worry, it\u0026rsquo;s really easy, assume you have a windows os, you don\u0026rsquo;t want it to stop running while losing power connection or want it to survive even from an earthquake. so you just run 2 windows in different computers simultaneously. Now we have 2 running windows os, if one of them stops, the other one will still keep running, thus our excel application can survive, however, we want these 2 windows run the same excel, handle the same row, the critical part becomes how to synchronize the state between 2 windows, the problem is what we called replicated state machine.\nThe nature is how to replicate state sequence, and the result is a fault tolerant computation system.\nwhat we have what we have # We have 2 instances(virtual machines, image it as windows).\nOne called primary, the other one called backup.\nThey are connected via network, they shared a net disk.\nwhat to replicate what to replicate # But the first problem is what to replicate?\n the sequence of the current result. include the registers, memory bytes, and all what we have modified. That\u0026rsquo;s not a good idea, because the data is too large. the sequence of the operation. like we clicked some place. The real operation is the underlying instructions in the execution stack I guess. It doesn\u0026rsquo;t matter if our interests is just try to understand the replication instead of virtual machine. A terrible thing is operating system has some uncertain events like time and IO interrupt, as the result, this uncertain things need to be translated to certain things. They have a professional terminology called deterministic state machine to describe this uncertain operation, a common example is now function, assume you want to replicate the data between 2 database, set and get operation is certain, but now system call is uncertain.  how to replicate (which called protocol) how to replicate (which called protocol) # The whole progress looks like this:\nThe Clients send requests to the primary,\nprimary translate it to a couple of certain operations,\nprimary send it to the backup,\nbackup response ack,\nprimary execute the request and response client,\ndone.\nWe have some problems here,\nThe first one is what if primary runs really fast, the backup falls behind a lot. sounds like after the primary respond, the backup found it will take him 2 days to catch up with the primary, that means if our primary stops running, we will lose our recent 2 days work!\nThe idea is to create a fixed length buffer to store the operations. We can assume the buffer can store 1 minutes work at most, if it\u0026rsquo;s full, the primary should pause and wait the backup to catch up with him. it\u0026rsquo;s like a block queue in inter process communication or a fixed length channel instance in golang. The purpose is to synchronize the speed of both sides.\nAnother problem is what if primary fails. If some machine fails, fault tolerant design starts work.\nIf the backup stops, everything seems still work, we fallback to the common scene: we have only one computer, it runs windows, it works.\nIf the primary stops, we want to shift to backup, but first, how does the backup recognize the primary has stopped. Just build a heartbeat to sense each other. If the primary find no heartbeat from backup, it can create a new backup. If the backup find no heartbeat, it try to become the primary, and repeat the behavior of the primary.\nThe progress of becoming a primary is usually called election in some consensus algorithm, vmft use a simple method to elect, use a cas(compare and set/swap) operation to write to a shared net disk. The winner of election is called primary, leader, master, main\u0026hellip;\nBy the way, to discover to the broken nodes in a system,\nwe use heartbeat,\nif we have only 2 nodes, they can heartbeat each other,\nif we have 3 or 5 nodes for a certain usage, we can create full connection among them,\nif we have unknown numbers of nodes, we can create a third party monitor service, to probe all of the nodes.\ncompare with other system compare with other system # GFS:\nvmft uses a more underlying model to replicate, it directly replicate the virtual machine, it theoretically means it can replicate all application run in the virtual machine like excel, database, game, but noticed that it must runs in low performance too.\nGFS is used to replicate bytes block specifically, that means it replicate in the application level. however, it provides no consistency promise while vmft says it will return only the primary and the backup persist successfully.\nThat means the data stored in GFS could be not the same at all, but application runs in vmft will always keep the same.\nsomething else something else # There are bunch of things we don\u0026rsquo;t care about, like the virtual machines specific improvement. Our interest focus on the general replication.\nReplicate the computation is not a good idea in some ways. because computation itself is expensive and it takes a lot of resources include not only the CPU, but also expensive memory, IO bandwidth. Calculate separately and replicate the result of a short period would be competitive.\n","date":"12 February 2023","permalink":"/paper/vmft/","section":"Posts","summary":"replicate computation is complex, paper vmft try to introduce their work","title":"Paper: Virtual Machine Fault Tolerant"},{"content":"","date":"12 February 2023","permalink":"/tags/replicate/","section":"Tags","summary":"","title":"replicate"},{"content":"","date":"12 February 2023","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"12 February 2023","permalink":"/contribute/","section":"Contributes","summary":"","title":"Contributes"},{"content":"","date":"12 February 2023","permalink":"/contribute/kube/scheduler/","section":"Contributes","summary":"","title":"Scheduler"},{"content":"","date":"12 February 2023","permalink":"/contribute/algorithm/leetcode2/","section":"Contributes","summary":"","title":"Leetcode2"},{"content":"","date":"12 February 2023","permalink":"/contribute/algorithm/leetcode1/","section":"Contributes","summary":"","title":"Leetcode1"},{"content":"","date":"2 February 2023","permalink":"/categories/blog/","section":"Categories","summary":"","title":"Blog"},{"content":"","date":"2 February 2023","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"2 February 2023","permalink":"/tags/ipsum/","section":"Tags","summary":"","title":"ipsum"},{"content":"","date":"2 February 2023","permalink":"/tags/lorem/","section":"Tags","summary":"","title":"lorem"},{"content":"","date":"2 February 2023","permalink":"/categories/post/","section":"Categories","summary":"","title":"Post"},{"content":"","date":"2 February 2023","permalink":"/tags/post/","section":"Tags","summary":"","title":"post"},{"content":"Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet # Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean in eleifend justo, vestibulum congue lacus. Quisque est libero, lacinia sed placerat ac, interdum id urna. Nulla venenatis volutpat libero, in laoreet leo fringilla eget. Etiam consequat sed nisi sit amet interdum. Pellentesque ullamcorper at turpis in ultrices. Pellentesque et elit mauris. Aenean eu augue sit amet nunc interdum ultricies. Aenean eleifend consectetur sapien vitae consectetur. Donec risus mauris, finibus at condimentum at, lacinia sit amet neque. Nulla facilisi. Suspendisse sollicitudin dolor quis eros tempor, a tempus ex varius.\n","date":"2 February 2023","permalink":"/contribute/queue/","section":"Contributes","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean in eleifend justo, vestibulum congue lacus. Quisque est libero, lacinia sed placerat ac, interdum id urna.","title":"Queue: Nats, NSQ, Kafka"},{"content":"Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet # Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean in eleifend justo, vestibulum congue lacus. Quisque est libero, lacinia sed placerat ac, interdum id urna. Nulla venenatis volutpat libero, in laoreet leo fringilla eget. Etiam consequat sed nisi sit amet interdum. Pellentesque ullamcorper at turpis in ultrices. Pellentesque et elit mauris. Aenean eu augue sit amet nunc interdum ultricies. Aenean eleifend consectetur sapien vitae consectetur. Donec risus mauris, finibus at condimentum at, lacinia sit amet neque. Nulla facilisi. Suspendisse sollicitudin dolor quis eros tempor, a tempus ex varius.\nNunc non leo non magna Nunc non leo non magna # Nunc non leo non magna ornare condimentum. Phasellus consequat nunc ut tellus porttitor bibendum. In pharetra ullamcorper metus quis mollis. Mauris bibendum, est in commodo hendrerit, dolor purus hendrerit dolor, at pharetra sapien erat sit amet ante. Etiam aliquet euismod libero, vel tincidunt felis mollis at. Sed scelerisque, tortor in convallis auctor, elit quam consectetur lacus, quis posuere risus libero non sem. Mauris sagittis nisi id aliquam lacinia. Vivamus finibus velit sed condimentum aliquet. Nullam in ante a erat lacinia semper. Curabitur pretium justo at leo maximus, quis dignissim nulla posuere. Donec eget consectetur neque, et mattis dui. Vivamus at mi enim. Nullam et nisi est. Nullam eget eros blandit, convallis odio eget, ornare enim.\nQuisque ultricies Quisque ultricies # Quisque ultricies tincidunt sem nec tincidunt. Aenean nibh diam, dapibus varius ornare nec, suscipit ut arcu. Integer ut elit sollicitudin, fermentum ipsum nec, tempus eros. Donec hendrerit facilisis maximus. Pellentesque eu mi ipsum. Vivamus diam tellus, varius sed dolor at, finibus tempus lorem. Morbi sed mauris quis enim vehicula hendrerit. Sed et sollicitudin est. Maecenas scelerisque ligula ac purus gravida, et feugiat nibh blandit. Integer id quam ac arcu convallis interdum eget sed libero. Aliquam varius est quis efficitur efficitur. Cras id turpis magna. Aenean cursus, libero auctor ullamcorper vestibulum, nisl risus consectetur nisi, ut molestie enim libero sed ipsum.\nEtiam sollicitudin Etiam sollicitudin # Etiam sollicitudin, ante ac fermentum varius, lorem ante congue mi, auctor dictum magna sem sed nibh. In et est id neque gravida aliquet quis a felis. Mauris tempor lectus ut gravida ornare. Curabitur at elementum tortor, in feugiat elit. Aenean auctor diam ut egestas rhoncus. Quisque tristique venenatis risus vitae suscipit. Nunc feugiat purus sed dolor gravida, non ullamcorper metus suscipit. Sed et tortor odio. Pellentesque at scelerisque nulla. In ut aliquam metus. Vivamus congue augue at pellentesque rhoncus. Donec a lectus tincidunt, aliquet libero sit amet, commodo arcu. Vivamus hendrerit quis augue eu lacinia. Sed sodales velit condimentum eros varius vulputate.\nProin tempor lorem Proin tempor lorem # Proin tempor lorem quam, ac maximus lectus sodales et. Sed laoreet orci vel metus luctus lobortis. Nam ex velit, vehicula id tristique sed, blandit eu nisi. Quisque semper libero nec massa malesuada congue. In faucibus lorem at diam fringilla, vel viverra magna lobortis. Ut commodo est urna, ut aliquet enim sagittis ut. Nulla posuere arcu sed lobortis accumsan. Phasellus fringilla dolor id est lobortis feugiat. Quisque enim elit, faucibus a mauris non, mattis aliquet orci. Nunc sagittis viverra erat, id condimentum lacus suscipit quis.\n","date":"4 September 2022","permalink":"/paper/raft/","section":"Posts","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean in eleifend justo, vestibulum congue lacus. Quisque est libero, lacinia sed placerat ac, interdum id urna.","title":"Paper: Raft Consensus Algorithm"},{"content":"about\n","date":"13 June 2022","permalink":"/paper/","section":"Posts","summary":"about","title":"Posts"},{"content":"Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet # Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean in eleifend justo, vestibulum congue lacus. Quisque est libero, lacinia sed placerat ac, interdum id urna. Nulla venenatis volutpat libero, in laoreet leo fringilla eget. Etiam consequat sed nisi sit amet interdum. Pellentesque ullamcorper at turpis in ultrices. Pellentesque et elit mauris. Aenean eu augue sit amet nunc interdum ultricies. Aenean eleifend consectetur sapien vitae consectetur. Donec risus mauris, finibus at condimentum at, lacinia sit amet neque. Nulla facilisi. Suspendisse sollicitudin dolor quis eros tempor, a tempus ex varius.\n","date":"4 September 2021","permalink":"/paper/testph/","section":"Posts","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean in eleifend justo, vestibulum congue lacus. Quisque est libero, lacinia sed placerat ac, interdum id urna.","title":"Super cool article that I wrote"},{"content":"","date":"1 January 0001","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"1 January 0001","permalink":"/series/","section":"Series","summary":"","title":"Series"}]