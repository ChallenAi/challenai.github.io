[{"content":" 参考: Perloff, Jeffrey M. Microeconomics, 8th Edition\n 提示： 对于没有接触过经济学的朋友，应该去打开某个教科书或课程，当发现某些地方看不懂的时候，再回到这里，当然，如果你不打算进行深入研究，只想看个大概，那也就当个小说刷下知乎。对于自认为很行的朋友，尤其是所谓科班出身，也很值得一读，汉语文化里，所谓的学校教学，不过尔尔，大部分课程和书籍讲的云里雾里，倒也不一定是故意不教你，而是老师自己是否掌握也不好说。\n兼容并蓄，和而不同。取长补短是一种很好成长方法。\n微观 微观 # 微观经济学是关于个体的讨论，是真实的经济。\n宏观经济学是对整体的讨论，观察到的是统计，是表象。\n我们观察一个人的生活。\n需求 需求 # 每天要吃饭坐车穿衣睡觉，可能某些人的习惯是早上一杯咖啡，有些人是晚上一杯酒，一杯奶茶，\n这些东西都是买回来的，是我们想要的东西，于是大家总结了下，统称为需求。有需求是因为我们想要活着，活的舒服，活的安全，我们可以加很多形容词，比如安全，我们是指不用担心未来丢掉工作，不用担心股价下跌，实际上，需求并不总是一成不变的，一些现象和文化确实导致了需求的变化。有一些对需求有正向驱动，有一些则有负向驱动，比如经济发展期的消费主义对需求有正向驱动，而经济衰退期的躺平文化，则冲击了需求。需求是根本性的经济组成，我们可以观察到一些失败的经济体失败的部分原因是需求过低，这和我们传统意义上的认知的刚好相反，我们总是期望从外部赚更多钱，我们观察作为管理者如何受这种文化影响而做出失败的经济干预，降低了经济的活力。例如外向型经济通常因内部需求过低导致的严重经济问题。\n关于需求我们有很多可以讨论的地方，之后我们联系其他因素，以一种关联视角回过来再看需求。\n供给 供给 # 有这样的需求其实是因为有相应供给，如果没有奶茶，我们就不需要奶茶，如果没有咖啡，我们就不需要咖啡，我们没有对星际飞船的需求是因为，没有星际飞船。有什么，统称为供给。听起来反直觉，但是原始人确实没有智能手机的需求，而受过高等教育的人可能对外语的电影有需求。\n经济学家号称经世济民，并不关心奶茶，所以就有需求和供给这样的说法，尽管是微观，他们考虑的仍是整体情况，或者是从抽象的角度。通过类似这样的抽象方法，我们可以通过较为简化的模型，去理解复杂的过程。这类似于物理中对任何物理都抽象为质点来观察其运动。\n量 量 # 奶茶店要预先准备椰果，波霸，红茶，准备多少是个问题，准备的多了，放到第二天变质了就浪费了，准备的少了不够卖就等于亏钱了，准备了多少杯，是供给数量。观察到，如果奶茶店多了，奶茶就会降价，这里指新品会降价，从而避免竞争带来的顾客损失，也就是说，通过降价可以吸引顾客，原来奶茶喝的少的，甚至不喝的人，也会跑过来买，这就意味着需求量上升了，这是一种普遍存在的现象，作为一种经验(术语叫 Law of Demand)被广泛认知，不仅仅是奶茶。\n相对应的，供给因价格下跌而减少，奶茶价格低就不好赚钱，赚不到钱导致很多奶茶店倒闭转行，从而缩小了供应数量。\n以上则是关于供应，需求，价格的关系，诚然，工资，个人偏好等一系列因素会影响供应和需求，但是我们主要关注价格，口味偏好作为个体差异，在市场上通常被统计结果掩盖，市场经济的一个特征是自由的交换，卖东西的时候，不管你是谁，你有钱我就给你，与集权的古代社会不一样，或许只有某些人可以使用丝绸，某些人可以坐马车，因此个人偏好没有任何实际意义。当然我们观察 kfc 这样跨文化的产品集合时，口味偏好产生出重要影响。\n供给量和需求量都随价格变动，一个价格越高，供给越多，一个价格越高，需求越少，刚好是相反的，\n供给和需求达成一致: 均衡 供给和需求达成一致: 均衡 # 相反的两个曲线，必然有交叉点，那是恰到好处的平衡点，意味着供给和需求达到某种妥协，在这里，可以 deal(成交)。这个点的术语叫均衡(market equilibrium)。术语本身没有什么价值，他是个符号，重要的是理解+这样类似的符号背后的意义，+就像是左手三个豆子，右手两个，放一起了。那么均衡呢。对于想要谈资的，应试的，工作的，术语非常重要，基本代表一切，对于想要工作出色的，创造性的，认知世界的，搞清楚发生了什么则更为重要，记住均衡并不能给你的公司带来更多收益，但是理解交叉点的含义却可以。因此，除了极其重要的术语，大部分术语不做介绍。\n现实世界中这个点总是变来变去，那是因为奶茶的成分可能是植脂末，原材料豆子的市场价可能会因收成不好提高，居民的工资也可能因经济不景气而下降，比如最近(2022~2023)发生的情况，消费主义作为一种经济和文化现象开始降温，像喜茶这样的企业未雨绸缪的大幅度降低了新品价格区间，企业倾向于收缩规模以削减成本，事实上除了早期正常的调整外，实际的经济状况可能比大部分人想象的要稍微糟糕一些。这些话题相对敏感，主要原因可能要许多年以后才能讨论。总之，像这样的因素导致了供给和需求的曲线上下移动，最终均衡点一直在移动。这些曲线在教科书上可能表现为两条直线，实际上，并没有一个线性的\n均衡点的移动并没有任何问题，实际上，绝大部分市场并没有位于这个交叉点，这个点通常来讲意味着效率，买家卖家都满意的一个折中位置，如果市场受到干预，则效率会被降低，干预通常由政策制定者进行，这通常是经济政策失败的原因之一。\n关于经济学是否可靠 关于经济学是否可靠 # 我知道有很多人认为，经济学并不可靠，很多现象不能用所学知识解释。实际上，绝大部分现象完全解释的通的，发展中国家的很多市场不是完全竞争市场，甚至很多市场是寡头垄断的，这种垄断不来源于竞争，政策影响了很多东西，甚至包括供给，尽管理论上供给控制并不是一个财政或货币工具，滥用导致很多经济问题，假如我们把群体总效用(所有参与经济的 utility，不知道这个词是不是这样翻译)作为指标，实际上这些政策总是损害均摊效用，用个不恰当的比喻，这些政策使全体居民平均变得不幸，当然，厉害的各有各的厉害之处(有靠卖铁卖铜，有靠旅游的，有靠金融的，总之五花八门)，弱鸡的都一个样，越是经济和制度建设落后的国家，腐败，内幕交易，失败政策越多，这不独独哪一家是这样，程度不同而已。个人认为这是发展仍处于某种阶段的必然结果。当我们把这些都联系起来，可以解释很多看起来玄幻的现象。当然，另一部分让人觉得不可靠的原因是，模型不对，主要由于考虑的因素不够或者一些基本的方法没有掌握。\n接着讲奶茶，\n这里有一些有趣的点，比如一个地方奶茶店过少但是有对应的需求，那么就有可能产生比较高的价格，现实世界中，奶茶是标品，价格统一，实际上会导致销量上升，奶茶店也会获得超额利润。由此产生了过剩或短缺的情况，供应太多，就过剩了，价格开始下跌，观察中东石油欧佩克组织，是一个联合石油供应源以减少供应(是指你家地底下埋着石油，我家也是，我们都卖，但是我希望我们不要恶心竞争，石油供应太多卖成矿泉水的价格我们日子都不好过，所以我们要联合起来)，以提高价格，但是价格并不是可以随意提高，如果价格过高，石油需求方则会加速寻找替代品，比如煤矿，风能，水能，电能，从而导致石油出现永久性的需求下降，一旦寻找到价格更低的能源，资本对新能源的研发投入会增加，技术落地最终导致石油的价格变得可能连矿泉水都不如。\n实际上，这个简单得模型出奇得有效，从直觉上讲，奶茶也好，手机也好，都有需求和供应，我们可以描述当手机供应上升时，手机的变动。遗憾的是，这一个单一的模型并不能解释很多东西，比如苹果和三星建立了新的产线，但是新手机价格依然上涨了，这也就是很多人为什么觉得经济学不可靠。实际上经济学确实有其问题，但是通常情况下，如果解释不了是因为模型弄的不对，考虑的变量不对。例如假设石油由一国控制输出，那么实际上他拥有有限的定价权，如果你想要，他说多少钱，你只要愿意接受，那就是多少钱，因为他可以随意改变供应数量，这种情况称为垄断，实际上是一种严重危害整体生产能力的情况，意味着石油并不一定算是属于人类，即使假设石油是无限的，输出国依然会控制输出量，如果不控制，那么输出国就是一个荒漠中的几个矿井，如果加以控制，那么输出国就是沙漠中成片的城市，这取决于石油在人类生产中的价值，这是经济中不公平的一面，或者是市场经济中不公平的一面，但是如果我们讨论诸如命令经济之类的模型，也就是通过计划分配，会发现基于人类自己计划的方案简直完全没有公平可言，尽管没有实现之前，往往可以有很美好的幻象，但是实际结果缺失一塌糊涂，有句话可以很好的形容，始于最崇高的理想，止于最低级的欲望。现在仍然有很多人心存幻想，但是有些事情虽然没人再提及，但是确实尝试过，群体的苦难是实验的代价，不管是哪个群体，那段时间都是黑色的。实际上，我们可以通过某些方式修补市场经济，所谓市场经济，就是自由交换的经济，我可以生产任何东西，卖给任何人。我们不考虑大麻这样的东西，实际上是因为他是成瘾品，这样的交换通常是不公平的，就像是强行把水变成了高价的商品，成为一种强制性的依赖，区别是，这种类型的水其实我不应该有需求，而电力则截然不同，电力生产是否应该被控制是个有趣而无趣的问题。后面我们会重点讨论类似大麻这部分话题，实际上是一种市场失败的表现，市场不是万能的，但是现实情况往往是，我们远远低估了市场的力量，高估了人工的力量。\n价格在干吗 价格在干吗 # 之所以提及市场经济这个词，是因为我们想要理解价格发挥的作用，实际上价格正在进行分配，当我需要什么，我就会得到什么，我努力一点，通常可以多得到一些我想要的，通过价格。 价格有趣的地方在于，他是客观的，没有价格的体系里，我在别人家当保洁，我去扫完厕所，主人说嘿小老弟你干的不错，我的 24k 纯金马桶锃光瓦亮，明天早上就多分你两个馒头，可是我这么努力并不是为了多吃俩馒头，我觉得不公平，我比做饭的老王拿的少，谁能说打扫厕所要拿到的应该比厨师少呢，事实上，每次吃馒头时，喜欢拍马屁搞事情的老李每次都拿的比我俩多，哎！向我这样专业勤奋的厕所清洁工竟然得不到应有的回报。因为主人有自己的看法，他的看法可能是主观的，甚至受自己的亲属朋友关系，言语的影响，现实世界中他做分配一定是很不公平的，不公的分配会影响生产，导致即使我这样优秀的厕所清洁工也会怠工，这也就是命令式的经济总是会走向灭亡的实际原因，之所以说会走向灭亡，是因为他会先败光之前的小农经济或市场经济的家底，这是现在没有一个经济超过平均水平的国家实质上实现命令式经济的原因，因为走向过毁灭，现在在喘息。我不清楚朝鲜是否实行计划经济，但是有不少地方历史上曾实施过，比如委内瑞拉，南非，俄罗斯，越南。我认为研究计划经济没有任何意义，所以之后不做讨论，但是我们依然会讨论其他可能的经济模型，比如畅想基于合成专家系统的经济，即使用人工构建的智能体实现分配以代替市场，或者某种形式的混合经济模型，以解决朴素市场中经济周期或者市场失灵这样的问题。\n关于干预 关于干预 # 通常来讲，可怕的并不是管理者对私利的渴求，而是无知和无能。\n实际上，在关于管制和干预方面，\n我打算进行大量的案例讨论，以观察失败和成功的货币财政政策带来的影响，\n这并不针对谁，考虑到现实世界，即使是美国和日本这样经济最为出色的国度里(我们会讨论日本经济的问题，或许读者并不认为日本经济是否足够出色)，依然存在很多失败的经济政策，我们也会讨论某国大量失败的经济政策，和一些成功的策略，及其影响。\n竞技游戏里通常有句嘲讽的话，说，就是栓条狗在键盘上都打的比你好，决策者并不总是想我们想象中那么明智。\n之所以更多聚焦在失败的经济政策上，是因为经济政策通常是二元的，做或不做，栓条狗是玩不了游戏的，所以栓条狗来做我们的决策者或许在很多情况下真的比政策制定者更优秀，通常经济学家比较倾向于自由市场。我们会在理解完一些经济概念，思想和过程的情况后，了解一些各个经济学派的差别，其中甚至有一些奇葩的异类。\n通常来讲，失败的经济政策通常情况下是政策制定者无能，实际上，也有很多其他因素，例如制定者内部也不是铁板一块，内部利益团体角力失败或占据主导会影响政策结果。这里我们只关心经济策略及其影响，不关心他们为什么最终指定了这样的政策。\n和正常的教科书，课程顺序不一样，我们先不讨论经济干预。我们先讨论市场，完全排除外部干预的影响，原因是，现代经济，所有经济很有活力的地方，都是市场经济。即便是卖资源为生的地方。\n弹性 弹性 # 似乎价格是供给和需求的晴雨表，个体会对价格做出反应，实质上，大家的反应并不一致。\n观察大米这种农产品，因为我们每天都要吃米，即使大米价格暴涨至双倍，恐怕我们也难以拒绝大米，大米暴涨会导致社会冲突，但是绝不会大幅度降低需求，这和我们的生活习惯和历史文化有关，大米是一种主食，而房子，豪车这样的东西暴涨则会严重影响需求，如果一套房子从 200 万涨到 300 万，需求可能大幅度降低，因为受教育程度较高原因，这种现象在发达国家尤其明显。这也意味着大米的需求某种程度上缺乏弹性，他就像个石头一样，你价格再变动，他和房子相比几乎岿然不动，这是另一个广泛存在的现象，术语叫弹性(elasticity)，本质上讲的是需求和供给相对于价格的敏感程度。弹性的意义在于，如果价格发生变化，供给方和需求方对此的反应可能是不一样的，考虑到降价 20%带来的影响，大米可能加工厂亏损严重，而豪车因销量上升而获得更多收益，实际上，利用弹性可以做很多有趣的事情，很自然的我们想到，像大米这样的商品，需求缺少弹性，意味着需求方对涨价没有太好的办法，只能默默承受，倘若大米不能涨价，是不是可以让一些其他商品涨价呢，对于某些特定商品，是否可以变动其弹性呢，如我们所说，豪车富有弹性，如果我们想办法降低豪车的弹性再趁机抬价，是不是可以获得更高的收益呢。\n这里对应于书的第 45 页，Price elasticity of demand/supply，后面讨论了税收的影响，我们不谈这个，因为之前讲过，我们先不讨论干预，税收作为一种广泛存在的干预，我们最后集中讨论。\n结语 结语 # 以上，便是基本经济原理的全部了，它包含需求和供给，中间通过价格作为桥梁紧密联系，但是价格对需求和供给的影响并不固定和稳定，使用弹性来描述。\n接下来，我们对需求，供给，价格进行一一观察，研究他们的细节。 最后我们在动态视角上观察他们如何交互。如果会编码，我们甚至可以利用 python 脚本编写一些模拟程序，来观察动态过程，当然结果可能是一堆数字在波动，没有那么形象。\n 本系列禁止转载\n ","date":"25 February 2023","permalink":"/inspiration/ecobasic/","section":"Grocery","summary":"市场不是万能的，但是现实情况往往是，我们远远低估了市场的力量，高估了人工的力量。","title":"(cn) economics: 2. 需求和供给"},{"content":"","date":"25 February 2023","permalink":"/tags/economics/","section":"Tags","summary":"","title":"economics"},{"content":"","date":"25 February 2023","permalink":"/series/economics/","section":"Series","summary":"","title":"economics"},{"content":"","date":"25 February 2023","permalink":"/tags/inspiration/","section":"Tags","summary":"","title":"inspiration"},{"content":"","date":"25 February 2023","permalink":"/","section":"Lun Jiang","summary":"","title":"Lun Jiang"},{"content":"","date":"25 February 2023","permalink":"/series/","section":"Series","summary":"","title":"Series"},{"content":"","date":"25 February 2023","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"什么是经济 什么是经济 # 经济大概是很多人都好奇的，感兴趣的东西，\n经济是一组交换，交换是因为匮乏，经济是一种知识，经验和实践。\n我们人类发现了一种用于提高平均生活水平的方式，于是将这个经验系统化，对生活的边边角角各个领域进行研究拓展，进一步形成了一些新的经验，从而进一步提高了生活水平，这些经验的集合称为经济学，响应的实践相当成功，叫做经济。\n我们之所以有现在的物质生活水平，是因为交换。通过将每个人提供的平均价值最大化，促进整体的价值最大化。\n相信对于很多人，主要的驱动力来自于对学术的神秘感和对财富的渴望，\n因此，我想分享我对经济的一些见解，理解大规模交换的过程。\n我保证这些文章都能读懂，如果读不懂，那就是一坨废话，我想，废话有其作用，我们的一生产出过大量废话，为了完成某个指标的废话论文，为了完成任务的某些心得，某些体会，高中无病呻吟的作文，废话尤其作用，但是我们不想弄成这样。根本原因是我可以为了点赞曝光广告，为了某个人交代的任务制造一坨垃圾，但是记录自己的认知时，不会应付了事。现在我想要open一点，所以放出来。\n我的背景和计划 我的背景和计划 # 大概是6,7年前大学的时候，我仔细研究过宏观和微观经济学，金融市场，机构，产品和衍生品。\n当时年少，一无所知，探索的过程中发现，宏观经济学里 GDP，通货膨胀，CPI，金融模型，货币供给，\n这些词一个个听起来都很厉害，颇有指点江山的意味，所以着重研究了宏观经济学。\n如果重来一次，我会选择重点研究微观经济学。\n所以我打算从微观经济学开始，重温一些基本的原理和过程，并记录下来，\n至于一些宏观和金融，一些分支，我并不打算回去再看，尤其是宏观经济学。\n可能如果发现有好的信息经济学，能源经济学相关的书或者课，我会看一下。\n我有很多自己的见解，并不意在写出来换取流量，而是自己的个人笔记和观点， 可能有些不会公开，我也在不断尝试说服自己不要想着对这些通用的东西有藏私的想法，这有一个过程。\n但是当前为止，一点存货都没有，因为之前的所有笔记都搞丢了，也算是个契机。\n我会讨论一些相对显得非常特别的经济体，比如日本，比如美国，比如英国。 或许因教育原因有些读者并不知道，日本是亚洲第一个崛起的国家，当时的生产规模，生产效率都与其他各地不能同日而语，是旧世界的当之无愧的王者，他是那样的鹤立鸡群，考虑到生产力在市场化分配的地域很大程度上代表了生活水平，以至于我们不禁要问，到底发生了什么才有那么高的物质生活水平，是他们比我们聪明，勤劳，还是人口众多，资源丰富？又或是真的受到了很多他国的扶持？昔日的荣光变成今日的瓦砾，那些光辉岁月终将流逝，日本衰败了吗，从比较的角度来看，日本经济确实不如从前，我们如何定义衰退？日本 GDP 排名为何逐渐下降。迈向死亡是痛苦的，政策制定者如何处理经济事务？他们如何看待自己的经济状况并不重要，重要的是，他们做了什么，他们能做什么，在这里，我们不观察他的心情，观点，我们考察他们的实践和结果。实际上，他们的过往是动人的，那种拼搏，挣扎到无力不禁使人落泪，人类的一些根本的情绪是共通的，我们会大概的梳理一下历程，却不去过多关心细节。\n英国发生过著名的工业革命，考虑到现代经济农业所占比重并不高，反而后面才出现的所谓工业占有很大比重，我们不禁想知道，工业到底是什么，是炼铁还是制造汽车，既然发生了工业革命，那么他们经济又发生了什么，工业如何影响生产能力，工业对旧时代有没有影响，也就是工业对农业又没有影响。\n美国是一个很有趣的国家，从经济，文化角度，他有太多太多值得讨论的地方，在此不做赘述。\n诚然他们都是超级大国，但是从经济角度看，他们又显得和他国格格不入，是，他们是不一样的。我们会评价他们某些时间节点的经济和金融政策，比如经济危机中，作为一地的决策者，他们有什么工具可以调整经济，尝试干预的后果是什么，是扬汤止沸，釜底抽薪抑或是隔靴搔痒，甚至是抱薪救火，这听起来像个笑话，你可能不信，但是抱薪救火确实是大量存在的情况，实际上，制度相对落后的地方，决策者往往倾向于掩盖错误，这无可厚非，但是经济不以个人意志转移，经济可不关心决策者的面子。经济决策通常是一个复杂过程，要考虑的不仅是效率，同时公平，内部利益团体的博弈，信息不对称和传播的失真都会导致一些看似愚蠢的经济决策。\n同时也会讨论一些相对落后的经济体，比如印度和某国。\n除了宏观上，我们也会讨论一些每个人都感兴趣的事情，比如什么是财富，是房子，车子，还是现金，财富如何影响生活和社会。 研究这些不是我对成为富翁感兴趣，而是我对财富流动，积累这样的现象感兴趣，相比财富，我更对做出好的产品，理解现象背后的原因感兴趣。对于这些现象比如财富是如何大量获得，以至于从消费的角度看，财富完全变成了一个数字，因为不管怎么消费，数字都不会改变。说是讨论，其实是我个人观点，记录。\n之后我们对一些重要的场景，进行建模，以一种简化的方式观察事情如何发生，运行，走向何方，进行相对精确的描述，我们用一些数字描述，方面对误差进行度量，这样我们才能知道我们的理解在何种程度上是正确的，比如用我们的所知道的知识对某个公司进行估值，尝试猜测他可能的价格范围，然后和现实世界进行对比，观察偏差。又比如使用公开信息对一地经济趋势进行预测，尝试预测某次宽松政策影响下的宏观经济指标，因为缺少数据，我们很可能难以对一地经济进行精确讨论，但是趋势却是很容易预测，我们在拿到结果后进行复盘，以观察修正我们的模型和理解。宏观和微观是两个截然不同的方向，一个代表统计和整体意义上的情况，一个代表个体情况。\n我们甚至可以制定政策以应对突发事件，并比对真实的决策者如何处理问题，就结果对双方进行比较和评价。当然，时下的事情，往往只能私下处理，不适合放到台面上讨论，或许十年二十年后，才可以讨论。比如我们可以评价改革开放的影响，确立市场经济占所谓主导地位的影响。\n遗憾的是，过去熟悉的一些概念可能渐渐模糊，毕竟78年过去了，这样，我们也是边学边走。\n做事情，要有这样的态度，即不畏权威，敢于质疑，勇于挑战复杂环境和问题，这倒不是让你和谁对着干，或者对前辈领导温顺谦恭，而是认识到其实有些人也不过就那样，比如你可看看你熟悉领域的那些个硕士博士论文，你就知道大家是个什么水平。总之不要以为别人就一定是对的，去挑战，去独自思考和解决复杂场景，去验证结果。\n理解一些原理有助于对现实世界进行建模，抽象，有助于理解现实世界究竟发生了什么，\n最后，我想讨论一些最新的论文，观点，研究成果，我们看看当前在某个具体的领域，我们对于某些特定领域的细节如何认知(通常来讲，论文描述的是某些细节问题)。\n除了回顾微观经济学之类的基本原理，其他大部分文章可能使用英文，虽然我确实想就自己的所思所想变得open一点，但我也确实没有义务和动机去照顾读者。\n另外，所有的文章并不具有术语和定义上的准确性，是我自己的看法。也并不为读者缩写，通常是我自己写完想法，学习笔记，然后略微润色一下，推出去。\n比如 经济是一组交换，交换是因为匮乏，经济是一种知识，经验和实践。\n我期望我学的，我想的，都是面向解决真实世界的问题而做，并不也永远不追求百科上那些精准的定义。\n结语 结语 # 最后我也有一些善意的警告，\n雨中电闪雷鸣看的真切，却少了些美，美来自距离，是神秘感。\n所以搞懂，理解深入不见得是件好事，\n人生是一场痛苦的旅程，而认知，尽管在物质方面虽回报颇丰，但在精神方面，是彻彻底底的痛苦，\n做一个天真的孩子，未尝不是一件好事，一旦长大，就已经截断了退路。\n","date":"24 February 2023","permalink":"/inspiration/ecostart/","section":"Grocery","summary":"搞懂一些东西不见得是件好事，人生是一场痛苦的旅程，而认知，尽管在物质方面虽回报颇丰，但在精神方面，是彻彻底底的痛苦，做一个天真的孩子，未尝不是一件好事，一旦长大，就已经截断了退路。","title":"(cn) economics: 1. 背景"},{"content":"Hi, it\u0026rsquo;s Lun Jiang from Shanghai.\n","date":"22 February 2023","permalink":"/about/","section":"Lun Jiang","summary":"Hi, it\u0026rsquo;s Lun Jiang from Shanghai.","title":"About me"},{"content":"","date":"16 February 2023","permalink":"/tags/disk/","section":"Tags","summary":"","title":"disk"},{"content":"","date":"16 February 2023","permalink":"/tags/open-source/","section":"Tags","summary":"","title":"open source"},{"content":"","date":"16 February 2023","permalink":"/tags/page/","section":"Tags","summary":"","title":"page"},{"content":"","date":"16 February 2023","permalink":"/tags/storage/","section":"Tags","summary":"","title":"storage"},{"content":"Todo: work in progress.\ndisk oriented disk oriented # What a storage system provides, is interacting with disk. That\u0026rsquo;s the system we called database, store, block or small file store, log, persist queue. The disk is a block device, so the most efficient way to interact with disk is read/write a certain length of bytes, that means don\u0026rsquo;t read a byte, a bit, read more at a time. The specific length is usually 4KB, 8KB, 16KB, it depends on disk property and usage of our upper layer system. But no matter what size it is, we called it a page. The page could be fixed length, or not. Experience shows that fix length means indexable, for example, in http2 protocol, the frame header are 9 bytes, it\u0026rsquo;s convenient to parse, it\u0026rsquo;s much easier to skip to the specific content with a certain offset. You can image if you skip 1 byte, that is the package size, if you skip 3 byte, it\u0026rsquo;s the package type, if you skip 6 bytes, it\u0026rsquo;s the package checksum.\nTherefore, the disk basically split into pages for an application. As the basic storage unit, we fill content to the pages, it could be a tuple for RDB, a log entry for write ahead log, a offset number for B+ tree node, or a simple chunk for a file, even a plain blob.\nMost of the time, we design the page as self-contained, that says a page contains some meta information about itself, like the page size, page type, page id, but just in most of the case. I talk about it because I think it as a kind of primitive to construct storage system, if we master the principles, we can design and implement a storage system for a specific use.\nLet\u0026rsquo;s talk more about pages. The pages are usually indexed by directory, which records all the page positions and page data ranges, for example, the page No.23 is stored at position 42312 or position #5, it\u0026rsquo;s range is apple ~ application. But Not all the page content are sequential, it could be arranged by hash. Think about the mysql database, it provides B+ tree index and hash index. The main difference is sequential structure provides ability to range scan, but hash index could be faster. Using a directory to index the page is called page heap.\nTo track a page in directory, we need record the content of the page and whether the page is empty.\ntransaction transaction # implementation: innodb implementation: innodb # implementation: leveldb implementation: leveldb # graph LR A(user) -- put/get -- B(leveldb) B -- C(memtable) B -- D(sstable) B -- E(write ahead log) D -- F(disk)  implementation: boltdb implementation: boltdb # implementation: badgerdb implementation: badgerdb # ","date":"16 February 2023","permalink":"/contribute/storage/","section":"Code Space","summary":"work in progress","title":"Storage Engine: from Primitives to Implementation"},{"content":"","date":"16 February 2023","permalink":"/tags/transaction/","section":"Tags","summary":"","title":"transaction"},{"content":"","date":"16 February 2023","permalink":"/tags/consensus/","section":"Tags","summary":"","title":"consensus"},{"content":"","date":"16 February 2023","permalink":"/tags/consistency/","section":"Tags","summary":"","title":"consistency"},{"content":"","date":"16 February 2023","permalink":"/tags/distributed-system/","section":"Tags","summary":"","title":"distributed system"},{"content":"","date":"16 February 2023","permalink":"/tags/fault-tolerant/","section":"Tags","summary":"","title":"fault tolerant"},{"content":"","date":"16 February 2023","permalink":"/tags/paper/","section":"Tags","summary":"","title":"paper"},{"content":" Original: \u0026ldquo;In Search of an Understandable Consensus Algorithm (Extended Version)\u0026rdquo;\nAuthors: Diego Ongaro and John Ousterhout (Stanford University)\n introduce introduce # Raft is a consensus algorithm widely used in industry. Another widely used available algorithm is called paxos, but the original paper \u0026lsquo;paxos made simple\u0026rsquo; doesn\u0026rsquo;t provide enough details about how to handle stream replication problem(replicate state machine), it talks about the single decree problem which is mainly about how to decide a certain value among a couple of nodes. The real applied algorithm is called multi-paxos, however, the nature of multi paxos in my opinion is almost the same with raft, the main difference is in leader election.\nbackground background # We want to copy a stream to 3~5 nodes(which we called RSM, replicate state machine problem).\nThe critical point is all the nodes should keep the same sequence, that means same data unit, same order. For example, think about a stream of number 51348, every node should persist the same sequence 51348, 53148 and 51148 is wrong.\nAccording to some experience from building practical real world paxos application, we find multi paxos need to elect a leader to improve performance(limit the Round Trip of replication to 1). Diego catch up a great idea: why not split the leader election, the real replicate progress as different parts to make it much clear? That\u0026rsquo;s raft, a practical version of multi paxos, which the author declare more understandable.\nThe result is fault tolerant, which can tolerate less than half of the nodes fails. So every time we accept a request, we don\u0026rsquo;t need to copy to all the nodes, we just replicate to majority of nodes and response immediately to improve performance.\nhow to reach consensus how to reach consensus # First of all, which we called leader, primary, master is exactly the same thing.\nWhen we want to replicate a stream, it\u0026rsquo;s always difficult to figure out how to reach a consensus for all the nodes in a specific issue, the problem is a stream includes a sequence of issues, that means a sequence of consensus need to be deal with, which sounds like a mess.\nHowever, if we have a leader, life becomes easier: all the nodes just follow the leader, replicate the stream element one by one according to leader, no coordination at all, if majority of follower nodes get the replica successfully, this replication turn has finished. An potential problem is the slow leader could become the bottleneck, which is a problem of raft.\nbut where is our leader but where is our leader # Let\u0026rsquo;s elect, everyone nominate himself as a leader, to make it more understandable, we called it president, everyone wants to be president, they all know the current term, for example, the current president is Baiden, the term is 47, in brief is Baiden is the 47th US president. If I want to be the next president, I will be the 48th president, so I nominate myself as 48th president, and someone like me is called the candidate. There is something to decide who can be the next president, in reality, it\u0026rsquo;s the speech, in raft, it\u0026rsquo;s who has more valid stream elements. Since it\u0026rsquo;s a stream replicate system, we compare the length of streams in all the nodes, the longest one should be the leader, so we compared last log index, if the log index is 6, it should longer than log with index 5. In the other hand, for every term, we have only 1 president, a president could be 47th, 48th, but 47th president could not be Trump and Baiden. So we compare the president term at the same time. if a node has term 48 logs, it should has newer logs than a node has only term 20 logs. In conclusion, every node try to be the president, but only one of them could be the next president. they will tell the others his expect term and his last log information, the log info includes log index and the term. The node who has the latest log, will become the next president with his expected term. Since the leader replicate the data to majority of nodes, the candidate only need to win the majority of the nodes instead all the nodes to be chosen.\nhow leader works how leader works # The president broadcast all request to the other nodes with its own term and the global sequential number, every log element has a term and an index number. In the real world, a president can propose a new act with his term and the act number, for every term there is only one president, which ensure if the term and index is the same, the log element could be the same, because a president could not say his 38th act is A, and his 38th act is also B. Notice that we could have more than president at the same time, but we have exact 1 president in the same term. If half of the nodes persist a specific element and response president, the president will say, ok, the act 38 starts work now, it\u0026rsquo;s a consensus.\nwhat if the leader fails what if the leader fails # If the president dies, maybe a terrorist assault, a well-known scandal or a traffic accident, the other nodes would not get acts from president any more, they could not even hear the president, which we called \u0026lsquo;lose the heartbeat\u0026rsquo;, they would join the election, nominate themselves. However, how about the log sequence? The next president will find some nodes(like original leader) has longer log than him, some nodes has shorter log than him, but since he can become the leader, he must has all log which has become a consensus(accept by majority), so nothing lost if the president just handle new request and ignore the longer nodes. The president try to cover all the newer logs in the nodes which has longer logs, and fill the the nodes which has shorter logs. No matter how the original log sequence it looks like, every node would have the same log sequence with leader. That\u0026rsquo;s what we called strong leadership. But wait a minute, if the president cover the longer node, will something be lost? No, since the president could become a president, it must hold the logs commit before, in reality, the longer logs includes the elements haven\u0026rsquo;t reach a consensus. But if the president contains some log elements which haven\u0026rsquo;t commit, it will still replicate this elements left.\nLet\u0026rsquo;s think about a 1 node application, if we issue a write request, the node could shutdown before persist the write or after the persist, but the client don\u0026rsquo;t know, the client don\u0026rsquo;t get the response, so it feel like the write operation fails. Since the president in a 3 nodes system hasn\u0026rsquo;t response the client yet, if could have persisted the write or not, thus the president can cover the other longer nodes, and submit the log elements which even haven\u0026rsquo;t commit.\nthe whole progress the whole progress # At the very beginning, we have some nodes, they all want to be the president to handle the out world request, if they have a president, they act like single one node, act as a whole. the system will keep running, if minority of the nodes fail, nothing lost, nothing broken in the perspective of out world request.\nIn order to be a president, the node need to propose his next term, if current president is 48th, and the node propose 42th, that means the node fall behind, the other node will refuse him. The node need to compare his latest log with the others too, because it\u0026rsquo;s a stream replicate system, we want the log to be highly reliable, nothing lost. If the node has newer log against the majority of the nodes, it could be voted as the next president. The reason of majority is we want to tolerate less than half of the nodes fail, and that also need the president replicate the data to a majority of nodes to promise the data will always survive.\nThe president broadcast log elements with their president term and log index, the log index is just like the index of an array to provide a sequence number. The president force all the other nodes keep the same log with him, and that\u0026rsquo;s how they reach consensus.\nIf a new president occurs, it would find himself has longer logs than some nodes, or has shorter los than some nodes too. However, it always try to make the other nodes persist the same logs with him, if the other nodes have different logs, cover them. The method to compare a specific log element is the term and sequential number, if term and N.O. is the same, the log must be the same, because a president will never say act 123 is A and act 123 is B at the same time, and there is only 1 president in every certain term.\n try to read the paper before read the article, if you feel blocked, get back here instead of reading the article without reading the paper.\na visible progress of raft could be found here: raftThe Raft Consensus Algorithm\n ","date":"16 February 2023","permalink":"/paper/raft/","section":"Papers","summary":"Replicate is a common topic in distributed system, algorithms like paxos and its variants are difficult to understand, lack of details, but raft can help","title":"Paper: Raft Consensus Algorithm"},{"content":"","date":"16 February 2023","permalink":"/tags/protocol/","section":"Tags","summary":"","title":"protocol"},{"content":"","date":"16 February 2023","permalink":"/tags/raft/","section":"Tags","summary":"","title":"raft"},{"content":"","date":"16 February 2023","permalink":"/tags/replicate/","section":"Tags","summary":"","title":"replicate"},{"content":"","date":"13 February 2023","permalink":"/tags/cloud-native/","section":"Tags","summary":"","title":"cloud native"},{"content":"","date":"13 February 2023","permalink":"/tags/control-plane/","section":"Tags","summary":"","title":"control plane"},{"content":"","date":"13 February 2023","permalink":"/tags/controller/","section":"Tags","summary":"","title":"controller"},{"content":"","date":"13 February 2023","permalink":"/tags/etcd/","section":"Tags","summary":"","title":"etcd"},{"content":"","date":"13 February 2023","permalink":"/tags/kubernetes/","section":"Tags","summary":"","title":"kubernetes"},{"content":"introduce introduce # ","date":"13 February 2023","permalink":"/contribute/kube/apiserver/","section":"Code Space","summary":"placeholder","title":"Kubernetes: API Server"},{"content":"introduce introduce # ","date":"13 February 2023","permalink":"/contribute/kube/controller/","section":"Code Space","summary":"placeholder","title":"Kubernetes: Controller"},{"content":"","date":"13 February 2023","permalink":"/tags/message-queue/","section":"Tags","summary":"","title":"message queue"},{"content":" Original: \u0026ldquo;The Design of a Practical System for Fault-Tolerant Virtual Machines\u0026rdquo;\nAuthors: Daniel J. Scales, Mike Nelson, and Ganesh Venkitachalam (VMware, Inc{scales,mnelson,ganesh}@vmware.com)\n introduce introduce # This paper (virtual machine fault tolerant) I think is one of the best paper for someone who wants to step into distributed system. It provides some basic opinions about how to replicate state.\nbackground background # The background of this paper is to design a fault tolerant virtual machine service, and the most common idea for fault tolerant is to replicate, so they talk about how to replicate computation.\nIf these terminology sounds a bit scare, like what the f**k they are? can you just say something more understandable like what a human can figure out, don\u0026rsquo;t worry, it\u0026rsquo;s really easy, assume you have a windows os, you don\u0026rsquo;t want it to stop running while losing power connection or want it to survive even from an earthquake. so you just run 2 windows in different computers simultaneously. Now we have 2 running windows os, if one of them stops, the other one will still keep running, thus our excel application can survive, however, we want these 2 windows run the same excel, handle the same row, the critical part becomes how to synchronize the state between 2 windows, the problem is what we called replicated state machine.\nThe nature is how to replicate state sequence, and the result is a fault tolerant computation system.\nwhat we have what we have # We have 2 instances(virtual machines, image it as windows).\nOne called primary, the other one called backup.\nThey are connected via network, they shared a net disk.\nwhat to replicate what to replicate # But the first problem is what to replicate?\n the sequence of the current result. include the registers, memory bytes, and all what we have modified. That\u0026rsquo;s not a good idea, because the data is too large. the sequence of the operation. like we clicked some place. The real operation is the underlying instructions in the execution stack I guess. It doesn\u0026rsquo;t matter if our interests is just try to understand the replication instead of virtual machine. A terrible thing is operating system has some uncertain events like time and IO interrupt, as the result, this uncertain things need to be translated to certain things. They have a professional terminology called deterministic state machine to describe this uncertain operation, a common example is now function, assume you want to replicate the data between 2 database, set and get operation is certain, but now system call is uncertain.  how to replicate (which called protocol) how to replicate (which called protocol) # The whole progress looks like this:\nThe clients send requests to the primary,\nprimary translate it to a couple of certain operations,\nprimary send it to the backup,\nbackup responds ack,\nprimary execute the request and response client,\ndone.\nWe have some problems here,\nThe first one is what if primary runs really fast, the backup falls behind a lot. sounds like after the primary respond, the backup found it will take him 2 days to catch up with the primary, that means if our primary stops running, we will lose our recent 2 days work!\nThe idea is to create a fixed length buffer to store the operations. We can assume the buffer can store 1 minutes work at most, if it\u0026rsquo;s full, the primary should pause and wait the backup to catch up with him. it\u0026rsquo;s like a block queue in inter process communication or a fixed length channel instance in golang. The purpose is to synchronize the speed of both sides.\nAnother problem is what if primary fails. If some machine fails, fault tolerant design starts work.\nIf the backup stops, everything seems still work, we fallback to the common scene: we have only one computer, it runs windows, it works.\nIf the primary stops, we want to shift to backup, but first, how does the backup recognize the primary has stopped. Just build a heartbeat to sense each other. If the primary find no heartbeat from backup, it can create a new backup. If the backup find no heartbeat, it try to become the primary, and repeat the behavior of the primary.\nThe progress of becoming a primary is usually called election in some consensus algorithm, vmft use a simple method to elect, use a cas(compare and set/swap) operation to write to a shared net disk. The winner of election is called primary, leader, master, main\u0026hellip;\nBy the way, to discover to the broken nodes in a system,\nwe use heartbeat,\nif we have only 2 nodes, they can heartbeat each other,\nif we have 3 or 5 nodes for a certain usage, we can create full connection among them,\nif we have unknown numbers of nodes, we can create a third party monitor service to probe all of the nodes.\ncompare with other system compare with other system # GFS:\nvmft uses a more underlying model to replicate, it directly replicate the virtual machine, it theoretically means it can replicate all application run in the virtual machine like excel, database, game, but noticed that it must runs in low performance too.\nGFS is used to replicate bytes block specifically, that means it replicate in the application level. however, it provides no consistency promise while vmft says it will return only the primary and the backup persist successfully.\nThat means the data stored in GFS could be not the same at all, but application runs in vmft will always keep the same.\nsomething else something else # There are bunch of things we don\u0026rsquo;t care about, like the virtual machines specific improvement. Our interest focus on the general replication.\nReplicate the computation is not a good idea in some ways. because computation itself is expensive and it takes a lot of resources include not only the CPU, but also expensive memory, IO bandwidth. Calculate separately and replicate the result of a short period would be more competitive.\n","date":"13 February 2023","permalink":"/paper/vmft/","section":"Papers","summary":"replicate computation is complex, paper vmft try to introduce the work to replicate virtual machine","title":"Paper: Virtual Machine Fault Tolerant"},{"content":"","date":"13 February 2023","permalink":"/tags/partition/","section":"Tags","summary":"","title":"partition"},{"content":"Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet # Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean in eleifend justo, vestibulum congue lacus. Quisque est libero, lacinia sed placerat ac, interdum id urna. Nulla venenatis volutpat libero, in laoreet leo fringilla eget. Etiam consequat sed nisi sit amet interdum. Pellentesque ullamcorper at turpis in ultrices. Pellentesque et elit mauris. Aenean eu augue sit amet nunc interdum ultricies. Aenean eleifend consectetur sapien vitae consectetur. Donec risus mauris, finibus at condimentum at, lacinia sit amet neque. Nulla facilisi. Suspendisse sollicitudin dolor quis eros tempor, a tempus ex varius.\n","date":"13 February 2023","permalink":"/contribute/queue/","section":"Code Space","summary":"Message Queue is a separate server to store message with FIFO sequence.","title":"Queue: Nats, NSQ and Kafka"},{"content":"","date":"13 February 2023","permalink":"/tags/replication/","section":"Tags","summary":"","title":"replication"},{"content":"","date":"12 February 2023","permalink":"/tags/cloud/","section":"Tags","summary":"","title":"cloud"},{"content":"","date":"12 February 2023","permalink":"/tags/container/","section":"Tags","summary":"","title":"container"},{"content":"Todo: work in progress.\nintroduce introduce # system call system call # ","date":"12 February 2023","permalink":"/contribute/container/","section":"Code Space","summary":"work in progress","title":"Container: Namespace, Cgroups and Shipping"},{"content":"Todo: Collate pieces. Make it an article for dummy.\nruntime runtime #  chan: - cpuprof: hashmap: - lfstack: 无锁栈，使用 cas lock_futex: lock 实现，使用 cas lock_sema: lock 的实现，使用 semaphore malloc: alloc mbarrier: gc-写屏障 mbitmap: gc-bitmap mcache: gc-线程内存块缓存，用于小对象 mcentral: gc-中心缓存(freelist) mfinal: gc-finalizer and block profling，不知道是啥 mfixalloc: gc-固定大小的对象分配 mgc: gc-主文件 mgcmark: gc-标记 mgcsweep: gc-清理 mgcwork: gc-灰色节点的处理队列，BFS 中队列一样的用法。 mheap: heap 实现 mprof: 分配器的 prof 信息 msize: 分配小尺寸 mstats: 内存统计信息，比如堆大小，已分配量 netpoll_epoll: epoll netpoll: - noasm: 就俩函数，都很简单，一个 cmpstring，另一个 bytes_Compare，很值得学习，学习 go:link 和+build 写法 panic: 包含 defer 和 throw 的实现，deferproc parfor: 并行 for 的实现 print1: 包括 print 的所有实现，比如 print([]int{1,2,3}) 的实现 proc: 一切秘密都在这里, gopark, goready proc1: 调度器 race: 竞争检测用的 runtime1: acquirem 和 releasem，分别释放和抓取线程，用来运行 goroutine runtime2: gmp 三个结构体都在这里了，还有 stack，gobuf，lfnode，_defer, _panic 等结构 select: select 的实现 sema: semaphore 实现 sigqueue: 信号处理 slice: - stack1: 运行栈实现，包括栈分配，释放，创建，栈帧布局等。 string: stubs: getg, systemstack, memclr, memmove, gogo, gosave, cas 等存根，真正实现在 asm 汇编里 symtab: 符号表 time: 时间相关，解析等 trace: 一些 追踪事件，可以用于帮助读源码和 debug traceback: type: 类型，包括函数，slice，map，指针等 typekind:  runtime:sync runtime:sync #  cas lock sema  ","date":"12 February 2023","permalink":"/contribute/golang/","section":"Code Space","summary":"Todo: Collate","title":"(cn) Golang Runtime Introduction"},{"content":" 原文开头:\n这几天日本改年号令和说选自万叶集，也想蹭蹭日本人的雅致，第一篇就叫樱之章，取自万叶恋歌的第一章。 万叶集里有一首雷神短歌，\n隐约雷鸣，阴霾天空，但盼风雨来,能留你在此。\n若是觉得有趣，不妨搜索下一句，对比诗经天地合乃敢与君绝，仿佛失去了那种至死不渝的气势，到是多了几分初见的青涩，倘若让我选，或是前者，昙花一刹，胜过万千。\n 关于 艾风逸 关于 艾风逸 # 十多年前年前我就使用艾风逸作为网名，其实他是我想给自己取得名字。我一直觉得父亲取名时迷信鬼神占卜，肤浅幼稚，故而对自己的名字颇为不满。\n风逸的风是指虚无缥缈，存在却又无形的，看不见无处不在却容易被忽略的东西。代指自然规律，又像社会规则这样的看不见的东西。\n小时候我总觉着，大家一直埋头学习，为什么不重新审视一下是否该学习，又该如何学习，该学什么。大家一直学，却从没想过如何学，为何学，所以学习就是一阵风，空气一样无处不在，却没人注意他。\n逸是指灵动跳脱，寓意能看清一切，从而随心所欲。换个说法，想赚钱就能赚到钱，想学啥就能学会，高效学习是自然规律，了解记忆曲线，题海都是对人脑学习规律的理解，赚钱则是对人类世界规则的理解，看很多人利用关系也好，利用资本也罢，都是对看不见的赚钱规则的正确认识。当然这些都只是自己的幻想，因为是名字嘛，所以总有点期望的意思，就像王百万一样。\n有些不知道的，可能会觉着这个名字挺文艺的，其实本人的寓意是这么个意思。\n有意思的是，我曾遇到一个女孩子用水若做名字，可那个女孩子太漂亮，那个年纪也没敢聊两句，想来聊多了又觉得你和她格格不入也没意思就是了。\n这是是我初中时取得昵称。一直用所以挺有感情。我很喜欢这个名字，我是个思想比较开放、自由和激进的人，所以以前，我想以后和谁结婚了，这个名字可以给孩子，如果妈妈喜欢，就随她姓把艾去掉。当然到高中开始已经决定以后不要孩子了。\n十多年过去，物是人非，房子被拆迁了搬走了，小伙伴因为教育分流也不联系了，只有这昵称，却一直被我保留着。\n注:\n原文发布在简书(2019-04-08T21:07:05+0800)，因为麻烦的审核机制已经放弃简书了。后迁到博客，因为所有数据丢失了，博客源码和文章也没有了，从其他网站移植过来。\ncover 上的 summary 是后来补充的。 ","date":"12 February 2023","permalink":"/inspiration/name/","section":"Grocery","summary":"每个人大概都一定程度上不喜欢自己的出身，名字，历史，那些不能掌控的初值。小时候一直想给自己取个新名字，是一种抱怨，无能的人才会抱怨，表达对既定的不满又无力改变；也是一种期盼，包含对的美好祝福。","title":"(cn) 艾风逸: 名字的故事"},{"content":"","date":"12 February 2023","permalink":"/tags/about/","section":"Tags","summary":"","title":"about"},{"content":"","date":"12 February 2023","permalink":"/tags/block-storage/","section":"Tags","summary":"","title":"block storage"},{"content":" The poem are selected from the Book of Poetry which is written in about 500~550 A.D.\nThe original name is \u0026ldquo;诗经：氓\u0026rdquo;.\n Chapter One Chapter One # A man looks attractive comes to me,\nswap my silk with his cloth.\nBut he doesn’t want the silk,\nhe wants me.\nI’m about to accompany with him to the River Qi when he leave,\nbut I keep going until Hill Dunqu.\nI don’t want to delay our marriage inside my heart,\nbut you(the man) never make a formal propose.\nPlease don’t be angry,\nI promise you autumn is our time.\nChapter Two Chapter Two # I miss you so sick,\nI stand in the city wall to look for you,\nI can feel my smile so bright when I find you,\nI can also feel my pain if you don’t appear.\nYou ask for fortune-teller to divine our future, It’s bright,\nso I enter your carriage and get married without doubt.\nChapter Three Chapter Three # When the leaf of mulberry tree hasn’t withered,\nit looks colorful.\n(When I’m still young, I looks beautiful.)\nTurtledove, don’t eat too much mulberry fruit.\nGirl, don’t fall too deep in love.\n(Chinese myth says the turtledove will get poisoning when it eat too much mulberry fruit, perhaps the girl should not fall in love too quickly, it\u0026rsquo;s the poison)\nIf a man fall in love, he can still leave,\nif a woman fall in love, she will get trapped.\n(In the traditional Chinese society, if a woman has married with someone, she is hard to remarry with someone else when divorced, the situation of man is totally different)\nChapter Four Chapter Four # Now the leafs of mulberry has withered,\nthey fall down from the limb.\nSince I came to your family,\nmy life became poor.\nRiver Qi runs day and night,\nit wets the curtain of my carriage (I decide to leave you).\nI have no fault in my behavior,\nbut you are inconsistent.\nChapter Five Chapter Five # After I become your wife, I work hard for our family;\nI sleep late, I wake up early.\n(however, we often have conflicts.)\nSince the verbally abusive ends,\nthe violence starts.\nBrothers are not wise enough,\nlaugh loudly at me.\nI stay alone and calm down to consider about myself,\nhow sad I am!\nChapter Six Chapter Six # River Qi looks so board, but it still has its border.\nSwamp Xi looks so large, but is also has its end.\n(so does our love.)\nI remind of my warm family time,\nwhen I was a little girl.\nEven though once we own the swear and promise from each other,\nwe are apart now,\nI will never think about our experience again,\nit’s end.\n Originally post in medium (2020-10-27T13:17:05) and modified some sentences, link attached as follow: A love story from distant eastern world\n ","date":"12 February 2023","permalink":"/inspiration/meng/","section":"Grocery","summary":"Love is always the topic for us all. It repeats again and again during thousands of years of our journey. It\u0026rsquo;s simple like that, fall in love, together and apart. maybe happy, maybe painful, kinda experience.","title":"Chinese Poem from 1500 Years Ago: An Attractive Man"},{"content":"","date":"12 February 2023","permalink":"/tags/column-storage/","section":"Tags","summary":"","title":"column storage"},{"content":"","date":"12 February 2023","permalink":"/tags/condition-variable/","section":"Tags","summary":"","title":"condition variable"},{"content":"","date":"12 February 2023","permalink":"/tags/culture/","section":"Tags","summary":"","title":"culture"},{"content":"","date":"12 February 2023","permalink":"/tags/garbage-collector/","section":"Tags","summary":"","title":"garbage collector"},{"content":"","date":"12 February 2023","permalink":"/tags/golang/","section":"Tags","summary":"","title":"golang"},{"content":"","date":"12 February 2023","permalink":"/tags/google/","section":"Tags","summary":"","title":"google"},{"content":"","date":"12 February 2023","permalink":"/tags/goroutine/","section":"Tags","summary":"","title":"goroutine"},{"content":"","date":"12 February 2023","permalink":"/tags/japanese/","section":"Tags","summary":"","title":"japanese"},{"content":"introduce introduce # ","date":"12 February 2023","permalink":"/contribute/kube/scheduler/","section":"Code Space","summary":"placeholder","title":"Kubernetes: Scheduler"},{"content":"","date":"12 February 2023","permalink":"/tags/language/","section":"Tags","summary":"","title":"language"},{"content":"","date":"12 February 2023","permalink":"/tags/lock/","section":"Tags","summary":"","title":"lock"},{"content":"","date":"12 February 2023","permalink":"/tags/master-slave/","section":"Tags","summary":"","title":"master-slave"},{"content":"","date":"12 February 2023","permalink":"/tags/memory-allocator/","section":"Tags","summary":"","title":"memory allocator"},{"content":"","date":"12 February 2023","permalink":"/tags/multiplex/","section":"Tags","summary":"","title":"multiplex"},{"content":"","date":"12 February 2023","permalink":"/tags/name/","section":"Tags","summary":"","title":"name"},{"content":"","date":"12 February 2023","permalink":"/tags/newsql/","section":"Tags","summary":"","title":"NewSQL"},{"content":" Original: \u0026ldquo;CockroachDB: The Resilient Geo-Distributed SQL Database\u0026rdquo;\nAuthors: Rebecca Taft, Irfan Sharif, Andrei Matei, Nathan VanBenschoten, Jordan Lewis, Tobias Grieger, Kai Niemi, Andy Woods, Anne Birzin, Raphael Poss, Paul Bardea, Amruta Ranade, Ben Darnell, Bram Gruneir, Justin Jaffray, Lucy Zhang, and Peter Mattis (Cockroach Labs, Inc.)\n introduce introduce # ","date":"12 February 2023","permalink":"/paper/cockroachdb/","section":"Papers","summary":"placeholder","title":"Paper: CockroachDB"},{"content":" Original: \u0026ldquo;The Google File System\u0026rdquo;\nAuthors: Sanjay Ghemawat, Howard Gobioff, and Shun-Tak Leung (Google)\n introduce introduce # requirements requirements # The first requirement is provide some basic function for a storage system:\n read(filename, offset) append(filename, data)  ","date":"12 February 2023","permalink":"/paper/gfs/","section":"Papers","summary":"placeholder","title":"Paper: Google File System"},{"content":" Original: \u0026quot;\u0026quot;\nAuthors:\n introduce introduce # ","date":"12 February 2023","permalink":"/paper/kafka/","section":"Papers","summary":"placeholder","title":"Paper: Kafka Message Queue"},{"content":"introduce introduce # ","date":"12 February 2023","permalink":"/paper/paxos/","section":"Papers","summary":"placeholder","title":"Paper: Paxos Consensus Algorithm and its variants"},{"content":"","date":"12 February 2023","permalink":"/tags/poem/","section":"Tags","summary":"","title":"poem"},{"content":"","date":"12 February 2023","permalink":"/tags/policy/","section":"Tags","summary":"","title":"policy"},{"content":"","date":"12 February 2023","permalink":"/tags/queue/","section":"Tags","summary":"","title":"queue"},{"content":"","date":"12 February 2023","permalink":"/tags/runtime/","section":"Tags","summary":"","title":"runtime"},{"content":"","date":"12 February 2023","permalink":"/tags/scheduler/","section":"Tags","summary":"","title":"scheduler"},{"content":"","date":"12 February 2023","permalink":"/tags/semaphore/","section":"Tags","summary":"","title":"semaphore"},{"content":"","date":"12 February 2023","permalink":"/tags/story/","section":"Tags","summary":"","title":"story"},{"content":"","date":"12 February 2023","permalink":"/tags/thread/","section":"Tags","summary":"","title":"thread"},{"content":"Topics/Hashtags: Language Runtime, Distributed System, Algorithm, Cloud Native, System Programming, Network, Protocol, Storage System, Transaction\nNot Included: How to use API, How to use library, Language Syntax, Design Pattern, How to use popular Tools(like: git/vim/tmux/vscode/database GUI)\u0026hellip;\n","date":"13 June 2022","permalink":"/contribute/","section":"Code Space","summary":"Topics/Hashtags: Language Runtime, Distributed System, Algorithm, Cloud Native, System Programming, Network, Protocol, Storage System, Transaction\nNot Included: How to use API, How to use library, Language Syntax, Design Pattern, How to use popular Tools(like: git/vim/tmux/vscode/database GUI)\u0026hellip;","title":"Code Space"},{"content":"Grocery: Inspiration, Opinions, Experience, Art.\n","date":"13 June 2022","permalink":"/inspiration/","section":"Grocery","summary":"Grocery: Inspiration, Opinions, Experience, Art.","title":"Grocery"},{"content":"Make it easy, for human.\n","date":"13 June 2022","permalink":"/paper/","section":"Papers","summary":"Make it easy, for human.","title":"Papers"},{"content":"","date":"1 January 0001","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"}]