<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Challen</title>
    <link>/</link>
    <description>Recent content on Challen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>ChallenAi</copyright>
    <lastBuildDate>Fri, 22 Oct 2021 21:48:16 +0800</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>有趣的算法题: 嵌套字段解析</title>
      <link>/posts/tech/embedfield/</link>
      <pubDate>Fri, 22 Oct 2021 21:48:16 +0800</pubDate>
      
      <guid>/posts/tech/embedfield/</guid>
      <description>算法题: 嵌套解析 题目如下： 解析一个文件，
文件格式是一行一行，
每行有字段，字段可以加引号。
字段里可以套字段。
如果被嵌套的字段有引号，引号要变成双重的，表示转义，
比如 &amp;ldquo;hello&amp;rdquo;，要变成 &amp;ldquo;&amp;hellip;&amp;ldquo;&amp;ldquo;hello&amp;rdquo;&amp;rdquo;&amp;hellip;.&amp;rdquo;
2,John,45,&amp;#34;足球,摄影&amp;#34;,New York 3,Carter Job,33,&amp;#34;&amp;#34;&amp;#34;健身&amp;#34;&amp;#34;,远足&amp;#34;,&amp;#34;河北,石家庄&amp;#34; 4,Steve,33,&amp;#34;大屏幕164&amp;#34;&amp;#34;&amp;#34;,&amp;#34;DC&amp;#34;&amp;#34;Home&amp;#34;&amp;#34;&amp;#34; 5,&amp;#34;Jul,y&amp;#34;,&amp;#34;&amp;#34;,,Canada John,33,&amp;#34;足球,摄影&amp;#34;,New York John,33,&amp;#34;足球,&amp;#34;&amp;#34;摄影&amp;#34;,New York 要解析成如下
2 | John | 45 | 足球,摄影 | New York 3 | Carter Job | 33 | &amp;#34;健身&amp;#34;,远足 | 河北,石家庄 4 | Steve | 33 | 大屏幕164 | DC&amp;#34;Home&amp;#34; 5 | Jul,y | | | Canada John | 33 | 足球,摄影 | New York John | 33 | 足球,摄影 | New York 这个题目没啥现实意义。</description>
      <content>&lt;h3 id=&#34;算法题-嵌套解析&#34;&gt;算法题: 嵌套解析&lt;/h3&gt;
&lt;p&gt;题目如下：
解析一个文件，&lt;br&gt;
文件格式是一行一行，&lt;br&gt;
每行有字段，字段可以加引号。&lt;br&gt;
字段里可以套字段。&lt;br&gt;
如果被嵌套的字段有引号，引号要变成双重的，表示转义，&lt;br&gt;
比如 &amp;ldquo;hello&amp;rdquo;，要变成 &amp;ldquo;&amp;hellip;&amp;ldquo;&amp;ldquo;hello&amp;rdquo;&amp;rdquo;&amp;hellip;.&amp;rdquo;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;2,John,45,&amp;#34;足球,摄影&amp;#34;,New York
3,Carter Job,33,&amp;#34;&amp;#34;&amp;#34;健身&amp;#34;&amp;#34;,远足&amp;#34;,&amp;#34;河北,石家庄&amp;#34;
4,Steve,33,&amp;#34;大屏幕164&amp;#34;&amp;#34;&amp;#34;,&amp;#34;DC&amp;#34;&amp;#34;Home&amp;#34;&amp;#34;&amp;#34;
5,&amp;#34;Jul,y&amp;#34;,&amp;#34;&amp;#34;,,Canada
John,33,&amp;#34;足球,摄影&amp;#34;,New York
John,33,&amp;#34;足球,&amp;#34;&amp;#34;摄影&amp;#34;,New York
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要解析成如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;2 | John | 45 | 足球,摄影 | New York
3 | Carter Job | 33 | &amp;#34;健身&amp;#34;,远足 | 河北,石家庄
4 | Steve | 33 | 大屏幕164 | DC&amp;#34;Home&amp;#34;
5 | Jul,y |  |  | Canada
John | 33 | 足球,摄影 | New York
John | 33 | 足球,摄影 | New York
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个题目没啥现实意义。&lt;br&gt;
但是解答的时候却很有启发。&lt;/p&gt;
&lt;p&gt;看懂了题目后，第一时间我想到的是栈，&lt;br&gt;
因为嵌套结构，那么标识符号一定是成对的，所以push/pop刚好可以解决。&lt;br&gt;
管他套几层括号转义，那还不等价于一个括号对嘛。&lt;br&gt;
结果&lt;code&gt;if else&lt;/code&gt;写了一堆，&lt;br&gt;
然后我意识到一个问题，解析的时候应该分成几层状态，&lt;br&gt;
一层是没引号的普通字段，一层是进入括号了，最后一层是进入嵌套括号了。&lt;/p&gt;
&lt;p&gt;写完后忽然意识到，这是个自动机，以前写算法从没写过这种。&lt;br&gt;
但是以前实现HTTP协议解析，也是这么搞的，&lt;br&gt;
nats源码里，基于CRLF的状态解析，也是这么搞的。&lt;/p&gt;
&lt;p&gt;其间，第一种解法，写到一半，20分钟已经过去了，可能好久没写算法了，也可能是水平不行。&lt;br&gt;
一个教训就是，通常想到一个解法，即使写到一般，发现这样不够简单优雅，也要写下去。 &lt;br&gt;
不然时间不一定够。  这时候新解法的很多细节其实还没想清楚。&lt;/p&gt;
&lt;p&gt;以下是解答:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bufio&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;io&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;strings&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; (
	&lt;span style=&#34;color:#a6e22e&#34;&gt;CR&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\r&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;LF&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Open&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;src.txt&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		panic(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Close&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;dst&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Create&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dst.txt&amp;#34;&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		panic(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dst&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Close&lt;/span&gt;()
	&lt;span style=&#34;color:#a6e22e&#34;&gt;parseFile&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;dst&lt;/span&gt;)
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parseFile&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;io&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Reader&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;io&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Writer&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;scanner&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bufio&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewScanner&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scanner&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Scan&lt;/span&gt;() {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;fields&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parseLine&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;scanner&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Text&lt;/span&gt;())
		&lt;span style=&#34;color:#a6e22e&#34;&gt;resu&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strings&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Join&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fields&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;CR&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;strings&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Join&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fields&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; | &amp;#34;&lt;/span&gt;))
		&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Write&lt;/span&gt;([]byte(&lt;span style=&#34;color:#a6e22e&#34;&gt;resu&lt;/span&gt;))
		&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Write&lt;/span&gt;([]byte(&lt;span style=&#34;color:#a6e22e&#34;&gt;LF&lt;/span&gt;))
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scanner&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Err&lt;/span&gt;(); &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Fprintln&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Stderr&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;读取错误:&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
	}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parseLine&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; {

	&lt;span style=&#34;color:#75715e&#34;&gt;// 输出结果
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;rsu&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{}

	&lt;span style=&#34;color:#75715e&#34;&gt;// field的头指针。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

	&lt;span style=&#34;color:#75715e&#34;&gt;// 当前解析的状态
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// -1 表示没有开始解析，或者解析结束了。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 0 表示 这个 field 没有 `&amp;#34;` 开头
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 1 表示 这个 field 有 `&amp;#34;` 开头
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 2 表示 这个 field 处在 子field中, 类似这种: `&amp;#34;abc&amp;#34;&amp;#34;dd`
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 0 没有&amp;#34;开头， 1，有&amp;#34;开头但是不在字段中， 2. 在子field中
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// 可以用 go 里的蹩脚 枚举，哈哈哈
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt; {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt; {
					&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
					&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
				} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt; {
					&lt;span style=&#34;color:#75715e&#34;&gt;// 防止空字段。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;					&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
					&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
				} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
					&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
				}
				&lt;span style=&#34;color:#a6e22e&#34;&gt;rsu&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;rsu&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
			}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
			&lt;span style=&#34;color:#75715e&#34;&gt;// ,xxx,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;rsu&lt;/span&gt;[len(&lt;span style=&#34;color:#a6e22e&#34;&gt;rsu&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]
				&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
				&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
				&lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
			}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
				&lt;span style=&#34;color:#a6e22e&#34;&gt;rsu&lt;/span&gt;[len(&lt;span style=&#34;color:#a6e22e&#34;&gt;rsu&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;:]
			}
			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt; {
				&lt;span style=&#34;color:#75715e&#34;&gt;// panic(&amp;#34;文件错误&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
			&lt;span style=&#34;color:#75715e&#34;&gt;// &amp;#34;xxxx&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt; {
				&lt;span style=&#34;color:#75715e&#34;&gt;// &amp;#34;xxxx&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt; {
					&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
				}
				&lt;span style=&#34;color:#75715e&#34;&gt;// &amp;#34;xxxx&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
					&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
				}
				&lt;span style=&#34;color:#a6e22e&#34;&gt;rsu&lt;/span&gt;[len(&lt;span style=&#34;color:#a6e22e&#34;&gt;rsu&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]
				&lt;span style=&#34;color:#75715e&#34;&gt;// 不管是 `&amp;#34;,` 还是 `&amp;#34;&amp;#34;` 都跳过
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
				&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
			}
		&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
			&lt;span style=&#34;color:#75715e&#34;&gt;// &amp;#34;xx&amp;#34;&amp;#34;xxx&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt; {
				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt; {
					&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
					&lt;span style=&#34;color:#a6e22e&#34;&gt;rsu&lt;/span&gt;[len(&lt;span style=&#34;color:#a6e22e&#34;&gt;rsu&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; : &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
				}
				&lt;span style=&#34;color:#75715e&#34;&gt;// &amp;#34;xx&amp;#34;&amp;#34;xxx&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &amp;lt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; len(&lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; {
					&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt; = &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
					&lt;span style=&#34;color:#a6e22e&#34;&gt;rsu&lt;/span&gt;[len(&lt;span style=&#34;color:#a6e22e&#34;&gt;rsu&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;]
				}
				&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
				&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;
			}
		}
	}
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rsu&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;题外话&#34;&gt;题外话&lt;/h3&gt;
&lt;p&gt;之前投加拿大的岗，一说人在上海，要提供工签，没一个理的。&lt;br&gt;
根本就没几个面试机会，国外找工作靠networking，但是没去哪里来的network，死循环。
今天投了更新了简历，然后一群HR联系，惊呆了，国内go开发的坑好多啊(虽然不及java岗的1/10 xD)。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>分布式键值存储系统的设计与实现</title>
      <link>/posts/tech/kvstore/</link>
      <pubDate>Sat, 15 May 2021 07:48:16 +0800</pubDate>
      
      <guid>/posts/tech/kvstore/</guid>
      <description>分布式键值存储系统的设计与实现 Author: ChallenAi
摘 要 略
关键词：键值数据库；大数据；数据分片；Raft 算法
Distributed KV Database Design and Implementation ABSTRACT Section omitted
Key words：Distributed Database; Scalable; Data Sharding; Raft Algorithm
目 录 1 绪 论
2 关键技术
2.1 数据分片
2.2 CAP 理论
2.3 共识算法
2.4 LSM 树
3 系统设计和实现
3.1 设计需求
3.2 系统 API
3.3 总体架构
3.4 数据分片
3.5 状态同步和持久化过程
3.6 客户端
3.7 调用过程
4 总结
4.1 学到的经验
4.2 其他工作和可以优化的地方
参考文献
致 谢
1 绪 论 略</description>
      <content>&lt;h1 id=&#34;分布式键值存储系统的设计与实现&#34;&gt;分布式键值存储系统的设计与实现&lt;/h1&gt;
&lt;p&gt;Author: ChallenAi&lt;/p&gt;
&lt;h2 id=&#34;摘-要&#34;&gt;摘 要&lt;/h2&gt;
&lt;p&gt;略&lt;/p&gt;
&lt;p&gt;关键词：键值数据库；大数据；数据分片；Raft 算法&lt;/p&gt;
&lt;h1 id=&#34;distributed-kv-database-design-and-implementation&#34;&gt;Distributed KV Database Design and Implementation&lt;/h1&gt;
&lt;h2 id=&#34;abstract&#34;&gt;ABSTRACT&lt;/h2&gt;
&lt;p&gt;Section omitted&lt;/p&gt;
&lt;p&gt;Key words：Distributed Database; Scalable; Data Sharding; Raft Algorithm&lt;/p&gt;
&lt;h2 id=&#34;目-录&#34;&gt;目 录&lt;/h2&gt;
&lt;p&gt;1 绪 论&lt;br&gt;
2 关键技术&lt;br&gt;
2.1 数据分片&lt;br&gt;
2.2 CAP 理论&lt;br&gt;
2.3 共识算法&lt;br&gt;
2.4 LSM 树&lt;br&gt;
3 系统设计和实现&lt;br&gt;
3.1 设计需求&lt;br&gt;
3.2 系统 API&lt;br&gt;
3.3 总体架构&lt;br&gt;
3.4 数据分片&lt;br&gt;
3.5 状态同步和持久化过程&lt;br&gt;
3.6 客户端&lt;br&gt;
3.7 调用过程&lt;br&gt;
4 总结&lt;br&gt;
4.1 学到的经验&lt;br&gt;
4.2 其他工作和可以优化的地方&lt;br&gt;
参考文献&lt;br&gt;
致 谢&lt;/p&gt;
&lt;h3 id=&#34;1-绪-论&#34;&gt;1 绪 论&lt;/h3&gt;
&lt;p&gt;略&lt;/p&gt;
&lt;h3 id=&#34;2-关键技术&#34;&gt;2 关键技术&lt;/h3&gt;
&lt;h4 id=&#34;21-数据分片&#34;&gt;2.1 数据分片&lt;/h4&gt;
&lt;p&gt;键值数据库数据分片的方法通常有根据键的范围分片和根据键的散列分片，根据键的范围分片通常给每个分片指定一块连续的键范围，然后将特定键保存到指定分片。根据键的散列分片则有助于数据的平衡分配，避免出现热点，但是也丧失了高效范围查询的能力。本文描述的系统使用了后者(据散列分片)，下文中一个分片直接称为 shard。&lt;/p&gt;
&lt;h4 id=&#34;22-cap-理论&#34;&gt;2.2 CAP 理论&lt;/h4&gt;
&lt;p&gt;对于多副本的数据库来说，如果需要实现线性一致性，那么假如其中一部分副本节点出现网络中断，副本节点宕机之类，那么这些副本节点就不能处理请求，需要等到他们恢复才能响应，这时候可用性就会下降。对可用性较高的场景，我们可能会降低一致性要求，大多数情况下，一致性，可用性和分区容错性难以同时满足，所以需要我们做出权衡。&lt;/p&gt;
&lt;h4 id=&#34;23-共识算法&#34;&gt;2.3 共识算法&lt;/h4&gt;
&lt;p&gt;Paxos 能够确保安全性和活性，并且支持集群成员的变更。它的正确性已被证明，并且在正常情况下是高效的。应用实现方面主要有 google 的 chubby，开源的 zookeeper，但是相对原论文做出了很多修改。不幸的是，Paxos 有两个显著的缺点。 第一个缺点是 Paxos 非常难以理解。Paxos 的第二个问题是它不能为构建实际的实现提供良好的基础。于是 Raft 算法被提出用于简化 Paxos 算法。&lt;/p&gt;
&lt;p&gt;根据 Raft 的论文，Raft 将问题分解成几个相对独立的，可被解决的、可解释的和可理解的子问题。Raft 算法被我们分成 leader 选举，日志复制，安全性和成员变更几个部分，通过不同几部分的结合，简化了算法整体的复杂性。Raft 算法的基本思想是，Raft 将客户端请求组织成一个序列，称为日志，并确保所有复制服务器看到相同的日志。每个副本按日志顺序执行客户端请求，并将其应用于服务状态的本地副本。由于所有实时副本都看到相同的日志内容，因此它们都以相同的顺序执行相同的请求，因此继续具有相同的服务状态。如果服务器失败但后来恢复，Raft 会负责更新其日志。只要至少有大多数服务器还活着，并且可以相互交谈，Raft 就会继续运行。如果没有这样的多数，Raft 将不会取得进展，但一旦多数人能够再次沟通，Raft 会尽快恢复到它中断的地方。复杂性的降低使得算法的工程实现上更易于维护。同时，Raft 和 Paxos 效率相。因此笔者选用了 Raft 算法。&lt;/p&gt;
&lt;h4 id=&#34;24-lsm-树&#34;&gt;2.4 LSM 树&lt;/h4&gt;
&lt;p&gt;LSM 的思想是对于新到来的数据直接保持在内存中，维持一个有序的结构，事实上开源实现 leveldb 使用跳表维持有序，内存中的结构被叫做 memtable，当 memtable 大小过大则会一层一层序列化成 sstable(Sorted Strings Table)到磁盘中。他们永远不会更新，只会不断向下合并，这个过程叫做 compation，从而提高写入速度，因为不存在插入操作，所以不需要 B 树那样的页分裂。相对的也引入了写放大，查询速度相对较慢等问题，作为权衡，为了解决海量数据存储的问题，在放弃 B 树高效查询的同时也可以引入布隆过滤器来提升部分整体性能，不存在的数据会被布隆过滤器过滤，只有极少量误判的数据则会被击穿到数据库中，在不同层次的 sst 中查找。&lt;/p&gt;
&lt;h3 id=&#34;3-系统设计和实现&#34;&gt;3 系统设计和实现&lt;/h3&gt;
&lt;h4 id=&#34;31-设计需求&#34;&gt;3.1 设计需求&lt;/h4&gt;
&lt;p&gt;设计一个高性能的分布式 kv 数据库，支持 get/put/delete 操作。数据分布在不同的服务器上，当数据量变大时，可以通过增加服务器增加数据库的存储容量，同时分散请求到不同的服务器，以便于拆分请求负载提高性能。&lt;/p&gt;
&lt;h4 id=&#34;32-系统-api&#34;&gt;3.2 系统 API&lt;/h4&gt;
&lt;p&gt;通过 set(key, val)设置一个键的值。通过 get(key)获取一个键的值。通过 delete(key)删除一个键。
set/get/delete 提供了强一致性，每次调用可以观察到之前所有的调用结果。计一个高性能的分布。&lt;/p&gt;
&lt;h4 id=&#34;33-总体架构&#34;&gt;3.3 总体架构&lt;/h4&gt;
&lt;p&gt;数据库主要由三部分构成，分别是 kv 服务器，meta 服务器和客户端。三者之间建立 TCP 连接，通过 RPC 进行通信。在我们的测试系统中，考虑到实验环境硬件和机器资源的限制，兼且 RPC 并不能体现存储系统的核心设计思想，则简单使用 golang 语言的协程(goroutine)来模拟通信，通过直接传送 golang 里的结构体实例来传送消息，也避免处理消息丢失，乱序，应用消息解包等问题。&lt;/p&gt;
&lt;p&gt;客户端、meta 服务器和 kv 服务器间建立连接并不会给 meta 服务器带来大量负载压力，TCP 连接是一组长连接，同时由于 meta 服务器本身并不接受请求，只负责调度分片的元信息，同时仅仅通信配置信息而不是实际的读写请求或 Shard 数据，所以 meta 服务器的负载仅仅来自于少量的 kv 服务器传送的少量数据。&lt;/p&gt;
&lt;p&gt;整体架构如图 3.1 所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../vendor/images/kvstore.png&#34; alt=&#34;总体架构&#34;&gt;
图 3.1 数据库的总体架构&lt;/p&gt;
&lt;p&gt;第一部分是实际存储数据的 kv 服务器，数据是被以分片(shard)的方式一段一段的存储在 kv 服务器上的，值得一提的是这里的 shard 因为采用 hash 分片的方式，所以数据是不连续的，所以 api 里没有提供 scan 接口，囿于笔者水平，在散列分片的方式下，没有想到高效的范围查询的实现方式，按照键范围分片的方式因为存储天然有序，则很容易实现 scan 查询。&lt;/p&gt;
&lt;p&gt;shard 本身是直接存储在 pebble 里面的，我们可以把它当做优化版的 leveldb，主要优化了多线程 compaction，多线程 flush 等。同时多个 shard 存储在同一个 pebble 引擎实例中以提高性能。&lt;/p&gt;
&lt;p&gt;第二部分是 meta 服务器，meta 服务器本身为了容错，使用 Raft 算法创建了 3 个副本，这样只要其中两个保持工作，系统依然能运行。meta 服务器主要存储 shard 所属的 Raft Group 和 Raft Group 与 kv 服务器之间的关系。我们实现了从 shard 的简单调度，期望数据尽可能的平均分布在不同的节点上以避免数据倾斜。当 shard 数量或者 Raft Group 发生变化的时候。shard 会自动重新平衡在不同的 Raft Group 中以重新平衡数据。&lt;/p&gt;
&lt;p&gt;对于每个 shard, Raft Group 和 kv 服务器之间的关系，我们封装为一个配置(一个 Config 结构体)，当 Config 发生变动时，创建一个新的配置并将它复制到 meta 服务器的其他节点中来。&lt;/p&gt;
&lt;p&gt;meta 服务器也暴露了 Query(configId)接口，用于查询特定 config 下的配置中的 shard 映射。同时也方便客户端缓存 shard 和实际的 kv 服务器之间的映射，这样客户端不需要在每次 get 等请求时都访问 meta 服务器获取 shard 位置信息，提高了系统整体的请求速度。&lt;/p&gt;
&lt;p&gt;第三部分是客户端，用于暴露实际的 get/put/delete 接口。从宏观上看，每个查询应该首先找到分片所处的 kv 服务器组，然后通过服务器组的 Leader 通过 AppendEntry RPC 来广播数据，如果数据广播成功，Leader 可以写入数据到我们的 pepple 引擎。同时请求也可以返回。如果广播失败或大部分节点没有返回正确的响应，则不会写入或读取成功数据，读取到的数据很可能是陈旧的，对于这种情况，返回错误的响应给用户。&lt;/p&gt;
&lt;p&gt;kv 服务器的结构体伪代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;KVServer&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;persister&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Persister&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 持久化结构体
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;rf&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Raft&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Raft 节点结构体
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;make_end&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ClientEnd&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 和其他 kv 服务器建立连接的函数，用于获取其他 kv 服务器的 shard
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;gid&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Raft Group Id
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;mck&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;metaServer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// meta 服务器的客户端，用于轮训获取新配置
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shardmaster&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Config&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 本 kv 服务器的最新配置，会写明最新应该拥有的 shard
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;ownShards&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;IntSet&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 当前配置的拥有的 shard
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;migratingShards&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HashMap&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;configId&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;kvpairs&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 配置号到需要迁移的数据的映射
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;waitingShards&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HashMap&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;shardId&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;gid&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#75715e&#34;&gt;// shard 号到需要请求的 shard 的组号
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;cleaningShards&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HashMap&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;configId&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;shardId&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 需要清除的 shard 号
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;historyConfigs&lt;/span&gt; []&lt;span style=&#34;color:#a6e22e&#34;&gt;shardmaster&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Config&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 历史配置的缓存
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Storage&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// pebble 的封装，用于应用数据修改和持久化
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;cache&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;int64&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 请求缓存，防止请求重复
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;34-数据分片&#34;&gt;3.4 数据分片&lt;/h4&gt;
&lt;p&gt;本系统选择了使用通过键的散列分片的方式，这样的设计可以减少数据偏斜，防止少部分分片变成热点。考虑到通过键的范围分区的方式在产生数据偏斜的情况下需要重新分裂分片，实现更为复杂，为了简单起见，我们通过散列键来分片的方式减少数据倾斜。&lt;/p&gt;
&lt;p&gt;数据库获取数据分片的方式是客户端根据 shard 函数计算出自己所处的分片号，然后通过 master 获取 shard 所处的 Raft Group 的信息。通过 Raft Group 到具体 kv 服务器组的映射来获取 shard 所处的 kv 服务器。考虑每组到 kv 服务器数量通常不会超过 5 个，所以我们采用直接轮次访问的方式来尝试找到实际的 Raft Group 的 Leader 节点，可以通过缓存 Leader 节点来获得均摊查询次数为一次的优化。&lt;/p&gt;
&lt;p&gt;配置和 meta 服务器的结构体伪代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Config&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;Num&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 配置 Id
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;Shards&lt;/span&gt; [&lt;span style=&#34;color:#a6e22e&#34;&gt;NShards&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// HashMap&amp;lt;分片号, Raft Group 号&amp;gt;，因为一个分片只属于一个 Raft Group，所以用数组直接存储。Shards[0]代表 Id 为 0 的分片的 Raft Group 号
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;Groups&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Raft&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Group&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Id&lt;/span&gt;, []&lt;span style=&#34;color:#a6e22e&#34;&gt;KVServer&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#75715e&#34;&gt;// HashMap&amp;lt;Raft Group 号, kv 服务器组&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MetaServer&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;rf&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;raft&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Raft&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 使用 Raft 维持副本
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;configs&lt;/span&gt; []&lt;span style=&#34;color:#a6e22e&#34;&gt;Config&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 存储的配置序列
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;cache&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;RequestId&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 请求缓存，每个请求一个 Id，防止重复写入
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过把分片尽可能平均分配在 Raft Group 中来平衡数据的在节点中的存储。&lt;/p&gt;
&lt;h4 id=&#34;35-状态同步和持久化过程&#34;&gt;3.5 状态同步和持久化过程&lt;/h4&gt;
&lt;p&gt;数据同步服务通过在多个复制服务器上存储其状态的完整副本来实现容错性。复制允许服务继续运行，即使其某些服务器遇到故障（崩溃或网络中断）。挑战在于，故障可能导致副本保存不同的数据副本。&lt;/p&gt;
&lt;p&gt;需要同步状态的有两个地方，一个是 meta 服务器的配置同步，配置是一个简单的结构体，因为数据量只有不到 1KB，所以直接通过 json 序列化保存到文件持久化，第二个是 shard 中 kv 数据操作的复制，我们的每次操作会写入日志，可以把它当做 mysql 的 binlog，我们依靠复制操作日志来实现 kv 服务器的数据同步。我们把封装的 pebble 存储引擎当做 Raft Group 里的状态机，当节点可以提交时，会写入数据到 pebble 引擎持久化数据。&lt;/p&gt;
&lt;p&gt;Raft 结构体伪代码如下：
(省略了锁，服务器优雅关闭，其他服务器列表等对 Raft 算法本身无意义的字段以增加可读性)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Raft&lt;/span&gt; {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;persister&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Persister&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 持久化结构体
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;leaderId&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// LeaerId，如果自己是 Leader,那么 id 就是自己的 id
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;currentTerm&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 当前任期号
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;votedFor&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 当前任期投票给谁，对于 candidate，会投票给自己
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;commitIndex&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 提交号，复制到大部分节点就可以提交
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;lastApplied&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 应用号，提交号更新则会立刻应用到状态机
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;logIndex&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 最后的日志号
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt; []&lt;span style=&#34;color:#a6e22e&#34;&gt;Entry&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 日志序列
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;nextIndex&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 作为 Leader 时，维护的其他节点的下一个日志号
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;matchIndex&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 作为 Leader 时，维护的其他节点的匹配的日志号
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;electionTimer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Timer&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 选举计时器
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;heartbeatTimer&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Timer&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 作为 Leader 时，心跳计时器
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;通过实现 raft 论文中描述的系统，实现了 Raft:VoteRequest, Raft:AppendEntry 和 Raft:InstallSanpshot 三个主要 RPC，其中 AppendEntry 同时用于日志广播和维持心跳阻止 follower 发起投票。&lt;/p&gt;
&lt;h4 id=&#34;36-客户端&#34;&gt;3.6 客户端&lt;/h4&gt;
&lt;p&gt;客户端会通过 shard(key)函数获取键所处的分片，这是一个简单的哈希函数，然后通过缓存自 meta 服务器的配置信息找出键所处的 kv 服务器，最后直接和 kv 服务器通信，寻找 Leader，通过 Leader 提交请求需要的操作。在一致性要求不高的请求中，读操作可以访问任意一个服务器，而写操作只能写入 Leader，但是本系统都会从 Leader 读取以保证线下一致性。客户端的配置信息是初始化的时候获取的，如果某个请求读取完所有的 kv 服务器仍然没有发现 leader，客户端则会重新从 meta 服务器中获取配置信息。&lt;/p&gt;
&lt;h4 id=&#34;37-调用过程&#34;&gt;3.7 调用过程&lt;/h4&gt;
&lt;h4 id=&#34;371-外部请求主要过程&#34;&gt;3.7.1 外部请求主要过程：&lt;/h4&gt;
&lt;p&gt;客户端操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先根据键计算出所处分片&lt;/li&gt;
&lt;li&gt;生成 RequestId 来防止重复请求&lt;/li&gt;
&lt;li&gt;从缓存的配置中找到 shard 所属 Raft Group，并找到 kv 服务器列表&lt;/li&gt;
&lt;li&gt;依次请求 kv 服务器列表，尝试获取值
kv 服务器(Leader)操作：&lt;/li&gt;
&lt;li&gt;如果不是 Leader，直接拒绝(可以通过代理请求或者返回 LeaderId 来优化)&lt;/li&gt;
&lt;li&gt;对比 RequestId 是否重复，如果已经请求过了，阻止重复写入&lt;/li&gt;
&lt;li&gt;根据自己的配置检查自己是否拥有该 key 的 shard&lt;/li&gt;
&lt;li&gt;写入一个 raft 日志到日志序列(对于读请求需要写入一个空日志用于解决脑裂陈旧数据问题，下文会介绍可能的优化方法)&lt;/li&gt;
&lt;li&gt;广播日志给 follower 节点，携带之前的日志号和日志任期号&lt;/li&gt;
&lt;li&gt;得到大多数节点的写入回复则会提交&lt;/li&gt;
&lt;li&gt;从 pebble 中获取该键，对于写入操作，这里需要提交应用号，但是读取操作在提交后可以直接返回值数据
3.7.2 新增或移除 Raft Group 的主要过程：
(查询配置的请求基本相同)&lt;/li&gt;
&lt;li&gt;请求 meta 服务器&lt;/li&gt;
&lt;li&gt;对比 RequestId 是否重复，如果已经请求过了，阻止重复写入&lt;/li&gt;
&lt;li&gt;调度 shard，以便于 shard 平均分配在 Raft Group 中，保存为新的配置&lt;/li&gt;
&lt;li&gt;将新的配置写入 raft 的配置日志序列&lt;/li&gt;
&lt;li&gt;广播日志给 follower 节点，携带之前的日志号和日志任期号&lt;/li&gt;
&lt;li&gt;得到大多数 meta 节点的写入回复则会提交&lt;/li&gt;
&lt;li&gt;更新 MetaServer 的 config 字段，标注为当前最新的配置
3.7.3 kv 服务器均衡 shard 的过程：&lt;/li&gt;
&lt;li&gt;定时轮训 MetaServer 的配置信息，如果有新的配置信息，则更新本地的配置&lt;/li&gt;
&lt;li&gt;如果发现配置变动，diff 自身拥有的 shard 和新配置里描述的 shard&lt;/li&gt;
&lt;li&gt;如果 shard 不一致，将新的 shard 放到请求队列&lt;/li&gt;
&lt;li&gt;从其他 kv 服务器(组 Leader)拉取需要的 shard，通过遍历 pebble 该 shard 里的 kv 并序列化对来打包 shard 传送(一种可能的优化方法是直接传送 sstable)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;4-总结&#34;&gt;4 总结&lt;/h3&gt;
&lt;h4 id=&#34;41-学到的经验&#34;&gt;4.1 学到的经验&lt;/h4&gt;
&lt;p&gt;对于 master/slave 结构的系统，如果我们的 master 有很多请求或者写入操作，那么他很有可能变成瓶颈，但是我们依然可以通过其他节点处理外部请求的方式实现接近于线性的伸缩性。&lt;/p&gt;
&lt;p&gt;散列分片的方式虽然更容易实现数据负载均衡分配，但是也可能给范围查询带来问题，需要跨多个分片合并查询，降低了系统性能。&lt;/p&gt;
&lt;p&gt;这些问题在系统设计的过程中多次遇到，也因此做了很多权衡，可能很多时候不是最佳的实现。&lt;/p&gt;
&lt;h4 id=&#34;42-其他工作和可以优化的地方&#34;&gt;4.2 其他工作和可以优化的地方&lt;/h4&gt;
&lt;p&gt;该系统的总体架构开始主要参考了 BigTable 论文实现，但是实现上与 BigTable 有很多方面的区别，第一，该系统没有采用 chubby(开源实现对应为 zookeeper)去存储关键元数据，而是采用 Raft 算法实现多个副本代替，&lt;/p&gt;
&lt;p&gt;第二，Tablet Server 中的 Tablet 实际上是保存在 GFS 上的 chunk，依靠 GFS 提高可用性，但是也损失了一定的性能，而我们通过 Raft Group 的方式实现 shard 的多副本机制提高可用性。&lt;/p&gt;
&lt;p&gt;第三，BigTable 中数据存储于 sst 中，sst 是一个排序表，对应的开源实现是 LSM 结构的 leveldb，leveldb 适用于多写少读的场景，但是写放大问题饱受诟病，pebble 可以看做是一个 go 版本的 leveldb，也是 CockroachDB 的存储引擎，它优化了 leveldb 的一些问题，考虑到存储引擎实现的复杂程度较高，笔者直接使用了该存储引擎来持久化数据。&lt;/p&gt;
&lt;p&gt;最后，考虑到工作量也并没有能实现 BigTable 里描述的多版本的数据存储，因此数据模型只有两个维度，也不需要考虑版本的垃圾回收。&lt;/p&gt;
&lt;p&gt;该数据库尚有很多可以优化的地方，对于客户端查询，可以尝试缓存 Leader 信息，客户端每次查询特定 Raft Group 的时候，通过轮次查询获得特定的 Group 的 Leader 节点信息，此时缓存 Leader 节点信息，因为 Leader 一般不会不断更新，所以可以每次客户端查询的均摊次数可以接近一次。&lt;/p&gt;
&lt;p&gt;根据 Raft 算法论文客户端部分的描述，可以实现基于租约的方式来阻止脑裂下的陈旧数据问题，这样可以提高整体的性能，目前的做法是将读类型的请求写入 log 通过 Raft 提交，提交之后一定能获取最新的数据，这样每次读起码需要获取过半节点中最慢节点的一次请求响应延迟。这样的解决方法虽然可以实现线性一致性，但是性能不佳。一种可能的更简单的优化方法是广播一个空 RPC 来确认自己仍然是 Leader，这样可以避免提交和存储到日志这些不必要的操作。&lt;/p&gt;
&lt;p&gt;使用基于范围的分片可以实现高效的范围查询，同时也可以在分片过大的时候动态的分裂分片，本系统里只是简单的配置固定数量的分片，如果按照键范围分片则需要动态分割分片。然后依靠已经实现的 meta 服务器调度，将新分片转移到其他 Raft Group。&lt;/p&gt;
&lt;p&gt;最后可以实现一些简单的监控系统，以收集分片，每秒接受的 RPC 数量，Leader 转移的次数等信息，便于更好的了解系统运行状态。&lt;/p&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;
&lt;p&gt;(忽略了一些毫无价值，受某些因素影响放上去的论文 :)&lt;/p&gt;
&lt;p&gt;[1] Fay Chang, Jeffrey Dean, Sanjay Ghemawat, Wilson C. Hsieh, Deborah A. Wallach, Michael Burrows, Tushar Chandra, Andrew Fikes, Robert Gruber: Bigtable: A Distributed Storage System for Structured Data[J]. OSDI 2006:205-218.&lt;br&gt;
[2] Diego Ongaro and John Ousterhout Stanford University. In Search of an Understandable Consensus Algorithm (Extended Version)[J]. 2013．&lt;br&gt;
[3] 陈陆. 分布式键值存储引擎的研究与实现[D]. 江苏科技大学，2016.&lt;br&gt;
[4] 赵江. 基于 LevelDB 的分布式数据库的研究与实现[D].国防科学技术大学，2019.&lt;br&gt;
[5] .&lt;br&gt;
[6] .&lt;br&gt;
[7] Sanjay Ghemawat, Howard Gobioff, and Shun-Tak Leung Google. The Google File System[J]. 2003.&lt;br&gt;
[8] VoltDB. VoltDB Resources[OL].2012.&lt;br&gt;
[9] Patrick Hunt and Mahadev Konar Yahoo! Grid, Flavio P. Junqueira and Benjamin Reed Yahoo! Research. ZooKeeper: Wait-free coordination for Internet-scale systems[J]. 2005.&lt;br&gt;
[10] .&lt;br&gt;
[11] .&lt;br&gt;
[12] 涂腾飞. Go 语言中的并发问题研究[D].北京邮电大学，2019.&lt;br&gt;
[13] .&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Create a Beatiful Blog with Hugo</title>
      <link>/posts/life/blog/</link>
      <pubDate>Fri, 14 May 2021 07:48:16 +0800</pubDate>
      
      <guid>/posts/life/blog/</guid>
      <description>what I need?   migrate blog to github
  easy to maintain
  use markdown
  minimalism
  hugo hugo is a static site generator. Why choose hugo ? It&amp;rsquo;s the most popular static site generator in github. I just need one, the only requirement is easy to use, that means it won&amp;rsquo;t waste my time in config.
theme: terminal minimalist
get start the main steps are listed in documentation of hugo.</description>
      <content>&lt;h3 id=&#34;what-i-need&#34;&gt;what I need?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;migrate blog to github&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;easy to maintain&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use markdown&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;minimalism&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hugo&#34;&gt;hugo&lt;/h3&gt;
&lt;p&gt;hugo is a static site generator.
Why choose hugo ?
It&amp;rsquo;s the most popular static site generator in github.
I just need one, the only requirement is easy to use, that means it won&amp;rsquo;t waste my time in config.&lt;/p&gt;
&lt;h3 id=&#34;theme-terminal&#34;&gt;theme: terminal&lt;/h3&gt;
&lt;p&gt;minimalist&lt;/p&gt;
&lt;h3 id=&#34;get-start&#34;&gt;get start&lt;/h3&gt;
&lt;p&gt;the main steps are listed in documentation of hugo.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;install hugo
use port install hugo&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;port install hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or we use brew, or download binary in realise page&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;brew install hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;create site
hugo new site challen&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;install theme
hint: If you want to update the theme, you can clone the repo, but I dont.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;go to &lt;code&gt;https://github.com/panr/hugo-theme-terminal/&lt;/code&gt; download&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;extract zipfile and move it to theme folder&lt;code&gt;mv hugo-theme-terminal-master theme/terminal&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;config site
this config is copy from the theme terminal default config in README.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;add first page
hugo new helloworld.md&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;run the local server
&lt;code&gt;hugo server -D&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;generate the static file
&lt;code&gt;hugo -D&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;test static file
&lt;code&gt;cd public &amp;amp; python -m SimpleHTTPServer 3000&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>艾风逸: 名字的故事</title>
      <link>/posts/inspiration/name/</link>
      <pubDate>Fri, 14 May 2021 02:26:16 +0800</pubDate>
      
      <guid>/posts/inspiration/name/</guid>
      <description>原文开头
 这几天日本改年号 令和 说选自万叶集，也想蹭蹭日本人的雅致，第一篇就叫樱之章，取自万叶恋歌的第一章。 万叶集里有一首雷神短歌，
隐约雷鸣,阴霾天空,但盼风雨来,能留你在此
若是觉得有趣，不妨搜索下一句，对比诗经天地合乃敢与君绝，仿佛失去了那种至死不渝的气势，到是多了几分初见的青涩，倘若让我选，或是前者，昙花一刹，胜过万千。
 十多年前年前我就使用**_艾风逸_**作为网名，其实他是我想给自己取得名字。我一直觉得父亲取名时迷信鬼神占卜，肤浅幼稚，故而对自己的名字颇为不满。
风逸的**_风_**是指虚无缥缈，存在却又无形的，看不见无处不在却容易被忽略的东西。代指自然规律，又像社会规则这样的看不见的东西。
小时候我总觉着，大家一直埋头学习，为什么不重新审视一下是否该学习，又该如何学习，该学什么。大家一直学，却从没想过如何学，为何学，所以学习就是一阵风，空气一样无处不在，却没人注意他。
逸是指灵动跳脱，寓意能看清一切，从而随心所欲。换个说法，想赚钱就能赚到钱，想学啥就能学会，高效学习是自然规律，了解记忆曲线，题海都是对人脑学习规律的理解，赚钱则是对人类世界规则的理解，看很多人利用关系也好，利用资本也罢，都是对看不见的赚钱规则的正确认识。当然这些都只是自己的幻想，因为是名字嘛，所以总有点期望的意思，就像王百万一样。
有些不知道的，可能会觉着这个名字挺文艺的，其实本人的寓意是这么个意思。
有意思的是，我曾遇到一个女孩子用水若做名字，可那个女孩子太漂亮，那个年纪也没敢聊两句，想来聊多了又觉得你和她格格不入也没意思就是了。
这是是我初中时取得昵称。一直用所以挺有感情。我很喜欢这个名字，我是个思想比较开放、自由和激进的人，所以以前，我想以后和谁结婚了，这个名字可以给孩子，如果妈妈喜欢，就随她姓把艾去掉。当然到高中开始已经决定以后不要孩子了。
十多年过去，物是人非，房子被拆迁了搬走了，小伙伴因为教育分流也不联系了，只有这昵称，却一直被我保留着。
原文发布在简书，因为麻烦的审核机制已经放弃简书了。</description>
      <content>&lt;p&gt;原文开头&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这几天日本改年号 &lt;strong&gt;&lt;em&gt;令和&lt;/em&gt;&lt;/strong&gt;
说选自万叶集，也想蹭蹭日本人的雅致，第一篇就叫樱之章，取自万叶恋歌的第一章。
万叶集里有一首雷神短歌，&lt;br&gt;
隐约雷鸣,阴霾天空,但盼风雨来,能留你在此&lt;br&gt;
若是觉得有趣，不妨搜索下一句，对比诗经天地合乃敢与君绝，仿佛失去了那种至死不渝的气势，到是多了几分初见的青涩，倘若让我选，或是前者，昙花一刹，胜过万千。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;十多年前年前我就使用**_艾风逸_**作为网名，其实他是我想给自己取得名字。我一直觉得父亲取名时迷信鬼神占卜，肤浅幼稚，故而对自己的名字颇为不满。&lt;/p&gt;
&lt;p&gt;风逸的**_风_**是指虚无缥缈，存在却又无形的，看不见无处不在却容易被忽略的东西。代指自然规律，又像社会规则这样的看不见的东西。&lt;/p&gt;
&lt;p&gt;小时候我总觉着，大家一直埋头学习，为什么不重新审视一下是否该学习，又该如何学习，该学什么。大家一直学，却从没想过如何学，为何学，所以学习就是一阵风，空气一样无处不在，却没人注意他。&lt;/p&gt;
&lt;p&gt;逸是指灵动跳脱，寓意能看清一切，从而随心所欲。换个说法，想赚钱就能赚到钱，想学啥就能学会，高效学习是自然规律，了解记忆曲线，题海都是对人脑学习规律的理解，赚钱则是对人类世界规则的理解，看很多人利用关系也好，利用资本也罢，都是对看不见的赚钱规则的正确认识。当然这些都只是自己的幻想，因为是名字嘛，所以总有点期望的意思，就像王百万一样。&lt;/p&gt;
&lt;p&gt;有些不知道的，可能会觉着这个名字挺文艺的，其实本人的寓意是这么个意思。&lt;/p&gt;
&lt;p&gt;有意思的是，我曾遇到一个女孩子用水若做名字，可那个女孩子太漂亮，那个年纪也没敢聊两句，想来聊多了又觉得你和她格格不入也没意思就是了。&lt;/p&gt;
&lt;p&gt;这是是我初中时取得昵称。一直用所以挺有感情。我很喜欢这个名字，我是个思想比较开放、自由和激进的人，所以以前，我想以后和谁结婚了，这个名字可以给孩子，如果妈妈喜欢，就随她姓把艾去掉。当然到高中开始已经决定以后不要孩子了。&lt;/p&gt;
&lt;p&gt;十多年过去，物是人非，房子被拆迁了搬走了，小伙伴因为教育分流也不联系了，只有这昵称，却一直被我保留着。&lt;/p&gt;
&lt;p&gt;原文发布在简书，因为麻烦的审核机制已经放弃简书了。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Asia Poem: Meng(氓)</title>
      <link>/posts/inspiration/meng/</link>
      <pubDate>Wed, 12 May 2021 01:28:16 +0800</pubDate>
      
      <guid>/posts/inspiration/meng/</guid>
      <description>This poem are selected from &amp;lsquo;the story of songs&amp;rsquo; which is written in about 300 AC, almost the same time with &amp;lsquo;the art of war&amp;rsquo; which is more famous than the former.
Inspiration The reason I translate this is I read an article (Why Women Sometimes Give Up On Men They Love)[https://psiloveyou.xyz/why-women-will-leave-men-they-love-a320d1e33c44] It remind me of a love story almost 2000 years ago in a totally diffirent culture.
Let&amp;rsquo;s take a look at this story.</description>
      <content>&lt;p&gt;This poem are selected from &amp;lsquo;the story of songs&amp;rsquo; which is written in about 300 AC, almost the same time with &amp;lsquo;the art of war&amp;rsquo; which is more famous than the former.&lt;/p&gt;
&lt;h2 id=&#34;inspiration&#34;&gt;Inspiration&lt;/h2&gt;
&lt;p&gt;The reason I translate this is I read an article (Why Women Sometimes Give Up On Men They Love)[https://psiloveyou.xyz/why-women-will-leave-men-they-love-a320d1e33c44]
It remind me of a love story almost 2000 years ago in a totally diffirent culture.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take a look at this story.&lt;/p&gt;
&lt;h2 id=&#34;chapter-one&#34;&gt;Chapter One&lt;/h2&gt;
&lt;p&gt;A man looks attractive comes to me,
use his cloth to swap my silk.&lt;/p&gt;
&lt;p&gt;But he doesn&amp;rsquo;t want the silk,
his target is me.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m about to accompany with him to the River Qi when we seperate,
but we finally arrived at Hill Dunqu.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t want to delay our marriage inside my heart,
but you(the man) never make a formal propose.&lt;/p&gt;
&lt;p&gt;Please don&amp;rsquo;t be angry,
I promise you autumn is the time.&lt;/p&gt;
&lt;h2 id=&#34;chapter-two&#34;&gt;Chapter Two&lt;/h2&gt;
&lt;p&gt;I miss you so sick,
I stand in the city wall to look for you,
I can feel my smile so bright when I find you,
I can also feel my pain if you don&amp;rsquo;t appear.&lt;/p&gt;
&lt;p&gt;You ask for fortune-teller to divine our future, It&amp;rsquo;s bright,
so I enter your carriage and get married without doubt.&lt;/p&gt;
&lt;h2 id=&#34;chapter-three&#34;&gt;Chapter Three&lt;/h2&gt;
&lt;p&gt;When the leaf of mulbery hasn&amp;rsquo;t withered,
it looks colorful.
(When I&amp;rsquo;m still young, I looks beautiful.)&lt;/p&gt;
&lt;p&gt;Turtledove, don&amp;rsquo;t eat too much mulbery fruit.
Gril, don&amp;rsquo;t fall too deep in love.
(Chinese myth says the turtledove will get poisoning when it eats too much mulbery fruit)&lt;/p&gt;
&lt;p&gt;If a man fall in love, he can still leave,
if a woman fall in love, she will get trapped.
(In the traditional society, if a woman has married with someone, she is really hard to remarry with someone else when divorced, the man is totally different)&lt;/p&gt;
&lt;h2 id=&#34;chapter-four&#34;&gt;Chapter Four&lt;/h2&gt;
&lt;p&gt;Now the leafs of mulbery has withered,
they fall down from the limb.&lt;/p&gt;
&lt;p&gt;Since I came to your family,
my life became poor.&lt;/p&gt;
&lt;p&gt;River Qi runs day and night,
it wets the curtain of my carriage (when I decide to leave you).&lt;/p&gt;
&lt;p&gt;I have no fault in my behavior,
but you are inconsistent.&lt;/p&gt;
&lt;h3 id=&#34;chapter-five&#34;&gt;Chapter Five&lt;/h3&gt;
&lt;p&gt;After I become your wife, I work hard for our family;
I go to bed late, I wake up early.&lt;/p&gt;
&lt;p&gt;(However, we often have conflict.)
Since the verbally abusive ends,
the family violence starts.&lt;/p&gt;
&lt;p&gt;Brothers are not wise enough,
laugh loudly at me.&lt;/p&gt;
&lt;p&gt;I stay alone and calm down to consider about myself,
how sad I am!&lt;/p&gt;
&lt;h3 id=&#34;chapter-six&#34;&gt;Chapter Six&lt;/h3&gt;
&lt;p&gt;River Qi looks so board, but it still has its border.
Swamp Xi looks so large, but it also has its end.
(so do I.)&lt;/p&gt;
&lt;p&gt;I still remember my warm family time
when I&amp;rsquo;m a little girl.&lt;/p&gt;
&lt;p&gt;Even though once we own the swear and promise from each other,
we stand in different sides now,
I will never think about you again,
it&amp;rsquo;s end.&lt;/p&gt;
&lt;h3 id=&#34;mordern-situation&#34;&gt;mordern situation&lt;/h3&gt;
&lt;p&gt;The lucky part is nowadays, we can easily devorce without to much limit,
especially in the western society.(Asian countries are usually much traditional.)
However, marriage is a serious topic, not only about outlooking, money,
the same story happens everyday.&lt;/p&gt;
&lt;p&gt;When I read the article before,
I can feel her pain.
But my opinion is don&amp;rsquo;t give your husband/wife advice to listen to you, or try to change his personality.
Instead, find someone really cares about you,
natually he will talk and listen to you, about dreams, future.&lt;/p&gt;
&lt;p&gt;original post here:&lt;br&gt;
&lt;a href=&#34;https://challenai.medium.com/a-love-story-from-distant-eastern-world-8de422cb0e53&#34;&gt;https://challenai.medium.com/a-love-story-from-distant-eastern-world-8de422cb0e53&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Asia Poem: Rain Watcher(听雨)</title>
      <link>/posts/inspiration/rain/</link>
      <pubDate>Wed, 12 May 2021 01:28:16 +0800</pubDate>
      
      <guid>/posts/inspiration/rain/</guid>
      <description>Content Listen to the rain in the party when I&amp;rsquo;m young. I can see the light of red candles reflected from curtain cover.
Listen to the rain in a floating boat when I&amp;rsquo;m an adult. I can see the wild goose fly against the west wind between board river and low cloudy sky.
But now I listen to the rain under the eaves of a temple. my hair has partly turned white.</description>
      <content>&lt;h2 id=&#34;content&#34;&gt;Content&lt;/h2&gt;
&lt;p&gt;Listen to the rain in the party when I&amp;rsquo;m young.
I can see the light of red candles reflected from curtain cover.&lt;/p&gt;
&lt;p&gt;Listen to the rain in a floating boat when I&amp;rsquo;m an adult.
I can see the wild goose fly against the west wind
between board river and low cloudy sky.&lt;/p&gt;
&lt;p&gt;But now I listen to the rain under the eaves of a temple.
my hair has partly turned white.
God seems has no emotion about our sadness and happiness, leave or reunion.
I hear the rain from dusk to dawn, one drop by another.&lt;/p&gt;
&lt;h2 id=&#34;a-simple-mordern-version&#34;&gt;A simple mordern version&lt;/h2&gt;
&lt;p&gt;When I&amp;rsquo;m young, I enjoy the party, the indulging atmosphere makes me crazy.&lt;/p&gt;
&lt;p&gt;When I&amp;rsquo;m an adult, I leave home to find better oppotunity, I have ambition when I&amp;rsquo;m on the way to future.&lt;/p&gt;
&lt;p&gt;Now that I have experienced too much,
I sit in a temple and care nothing about outside world.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>vim 及其配置</title>
      <link>/posts/life/vim/</link>
      <pubDate>Fri, 23 Apr 2021 07:19:12 +0800</pubDate>
      
      <guid>/posts/life/vim/</guid>
      <description>vim 是什么 vim 是一种编辑方式，编辑唯一的要求是定位光标，比如调到某函数，修改该函数的参数。 vim 本身也可以打造出 IDE。
为什么用或不用 vim? 优点： 输入高效，其实熟练以后不用动脑子，就是肌肉记忆。想象一下，小时候和朋友 QQ 聊天时有什么负担吗？没有，我们打字打得飞起，就那种感觉，vim 习惯后和 QQ 打字并没有任何区别。那么为什么我们熟悉了 QQ 打字还有学 vim 呢，vim 可以用来移动光标，比如移动到一个论文的第二章，或者，移动到一个函数的函数名，或者删除括号里的参数。
缺点： vim 作为编辑器本身并不好用，轻量但是功能不强(和其他编辑器比较)，比如很多 java 做开发的会直接点击运行，然后程序就跑出来了，然后 vim 里你要写个脚本，或者安装一些插件，学习下怎么用(通常也要命令&amp;hellip;)，*nux 下的开发者往往更喜欢这样。然后往往会用其他编辑器都开 vim 模式，但是其他编辑器 vim 模式不见得好用。
另外，chrome 等也有 vim 模式，熟悉以后也很好用，有时候会鼠标点点，有时候想起来又直接 j 上下滑，/来搜索，f 来跳连接，没有任何负担。
快捷键实例   复制所有内容到系统剪切板 主要因为行号，所以不能手动 ctrl+c，gg&amp;quot;+yG，解释：ggyG或ggvGy是复制所有，&amp;quot;+y是复制到系统剪切板，因为+和*是系统 buffer.
  快速跳到字母 按 f
  强调 远程开发时，vim 插件要运行与远程服务器。
我的本地的 vimrc syntax onset termguicolorsfiletype plugin indent onset nu &amp;#34;显示行号set relativenumberset showcmd &amp;#34;显示命令set showmatch &amp;#34;显示匹配括号set cindent &amp;#34;c/c++分格缩进set backspace=indent,eol,startset hidden &amp;#34;退出不会提示，buffer has not changed.</description>
      <content>&lt;p&gt;&lt;img src=&#34;../../vendor/images/vim.png&#34; alt=&#34;本地vim配置&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;vim-是什么&#34;&gt;vim 是什么&lt;/h3&gt;
&lt;p&gt;vim 是一种编辑方式，编辑唯一的要求是定位光标，比如调到某函数，修改该函数的参数。
vim 本身也可以打造出 IDE。&lt;/p&gt;
&lt;h3 id=&#34;为什么用或不用-vim&#34;&gt;为什么用或不用 vim?&lt;/h3&gt;
&lt;p&gt;优点： 输入高效，其实熟练以后不用动脑子，就是肌肉记忆。想象一下，小时候和朋友 QQ 聊天时有什么负担吗？没有，我们打字打得飞起，就那种感觉，vim 习惯后和 QQ 打字并没有任何区别。那么为什么我们熟悉了 QQ 打字还有学 vim 呢，vim 可以用来移动光标，比如移动到一个论文的第二章，或者，移动到一个函数的函数名，或者删除括号里的参数。&lt;/p&gt;
&lt;p&gt;缺点： vim 作为编辑器本身并不好用，轻量但是功能不强(和其他编辑器比较)，比如很多 java 做开发的会直接点击运行，然后程序就跑出来了，然后 vim 里你要写个脚本，或者安装一些插件，学习下怎么用(通常也要命令&amp;hellip;)，*nux 下的开发者往往更喜欢这样。然后往往会用其他编辑器都开 vim 模式，但是其他编辑器 vim 模式不见得好用。&lt;/p&gt;
&lt;p&gt;另外，chrome 等也有 vim 模式，熟悉以后也很好用，有时候会鼠标点点，有时候想起来又直接 j 上下滑，/来搜索，f 来跳连接，没有任何负担。&lt;/p&gt;
&lt;h3 id=&#34;快捷键实例&#34;&gt;快捷键实例&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;复制所有内容到系统剪切板
主要因为行号，所以不能手动 ctrl+c，&lt;code&gt;gg&amp;quot;+yG&lt;/code&gt;，解释：&lt;code&gt;ggyG&lt;/code&gt;或&lt;code&gt;ggvGy&lt;/code&gt;是复制所有，&lt;code&gt;&amp;quot;+y&lt;/code&gt;是复制到系统剪切板，因为+和*是系统 buffer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;快速跳到字母
按 f&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;强调&#34;&gt;强调&lt;/h3&gt;
&lt;p&gt;远程开发时，vim 插件要运行与远程服务器。&lt;/p&gt;
&lt;h4 id=&#34;我的本地的-vimrc&#34;&gt;我的本地的 vimrc&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vimrc&#34; data-lang=&#34;vimrc&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;termguicolors&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;filetype&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plugin&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;indent&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nu&lt;/span&gt;                                &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;显示行号&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;relativenumber&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;showcmd&lt;/span&gt;                            &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;显示命令&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;showmatch&lt;/span&gt;                         &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;显示匹配括号&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cindent&lt;/span&gt;                           &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;c/c++分格缩进&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;backspace&lt;/span&gt;=&lt;span style=&#34;color:#a6e22e&#34;&gt;indent&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;eol&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hidden&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;退出不会提示，buffer has not changed...&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nowrap&lt;/span&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;split的窗口，这边编辑的字符不会顶出到别的窗口&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shell&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sh&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 解决coc安装问题&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;所有类型tab都转换为4字符&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;expandtab&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;smarttab&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shiftwidth&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tabstop&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;history&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;9999&lt;/span&gt;           &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;vim记住历史操作次数, 重度使用的时候4k几天就搞没了，，&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;autoread&lt;/span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;当文件在外部被修改时，自动重新读取&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hlsearch&lt;/span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;高亮度反白&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;laststatus&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;           &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;显示当前编辑文件的文件名和路径&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;encoding&lt;/span&gt;=&lt;span style=&#34;color:#a6e22e&#34;&gt;utf&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;-8&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;  。。。&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cursorline&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;imap&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;jk&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ESC&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;我的开发环境-vimrc&#34;&gt;我的开发环境 vimrc&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;如果要使用 vim 做开发，那么应该配置在远程服务器上，&lt;br&gt;
(自己的项目可以在阿里云上买个服务器)&lt;br&gt;
然后通过 ssh + tmux 连上，运行 vim 命令就有效果了。&lt;br&gt;
既然本地没有开发环境，那么本地 vim 也就同样不需要开发插件了，&lt;br&gt;
顶多开个 markdown 或者基本高亮。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vimrc&#34; data-lang=&#34;vimrc&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;syntax&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;termguicolors&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;filetype&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plugin&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;indent&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nu&lt;/span&gt;                                &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;显示行号&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;relativenumber&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;showcmd&lt;/span&gt;                            &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;显示命令&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;showmatch&lt;/span&gt;                         &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;显示匹配括号&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cindent&lt;/span&gt;                           &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;c/c++分格缩进&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;backspace&lt;/span&gt;=&lt;span style=&#34;color:#a6e22e&#34;&gt;indent&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;eol&lt;/span&gt;,&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hidden&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;退出不会提示，buffer has not changed...&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;nowrap&lt;/span&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;split的窗口，这边编辑的字符不会顶出到别的窗口&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shell&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sh&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 解决coc安装问题&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; set t_Co=256&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;所有类型tab都转换为4字符&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;expandtab&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;smarttab&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;shiftwidth&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tabstop&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;history&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;9999&lt;/span&gt;           &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;vim记住历史操作次数, 重度使用的时候4k几天就搞没了，，&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;autoread&lt;/span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;当文件在外部被修改时，自动重新读取&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hlsearch&lt;/span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;高亮度反白&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;laststatus&lt;/span&gt;=&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;           &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;显示当前编辑文件的文件名和路径&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;encoding&lt;/span&gt;=&lt;span style=&#34;color:#a6e22e&#34;&gt;utf&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;-8&lt;/span&gt;         &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;  。。。&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;color desert&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cursorline&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;hi CursorLine term=bold cterm=bold guibg=Grey40&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;hi CursorLine  cterm=NONE ctermbg=darkred ctermfg=white&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; auto complete } and enter next line&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;inoremap&lt;/span&gt; {&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;CR&lt;/span&gt;&amp;gt; {&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;CR&lt;/span&gt;&amp;gt;}&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ESC&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;O&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;imap&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;jk&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ESC&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;dracula_italic&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; let g:embark_terminal_italics = 0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;remember last edit&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;autocmd&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BufReadPost&lt;/span&gt; *&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    \&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;line&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;\&amp;#34;&amp;#34;&lt;/span&gt;)&amp;gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&amp;amp;&amp;amp;&lt;span style=&#34;color:#a6e22e&#34;&gt;line&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;\&amp;#34;&amp;#34;&lt;/span&gt;)&amp;lt;=&lt;span style=&#34;color:#a6e22e&#34;&gt;line&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;$&amp;#34;&lt;/span&gt;)|&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    \&lt;span style=&#34;color:#a6e22e&#34;&gt;exe&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;normal g&amp;#39;\&amp;#34;&amp;#34;&lt;/span&gt; |&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;    \&lt;span style=&#34;color:#66d9ef&#34;&gt;endif&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plug&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;begin&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;~/.vim/plugged&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 状态栏 哟西&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vim-airline/vim-airline&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vim-airline/vim-airline-themes&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;takac/vim-hardtime&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 主题&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;arcticicestudio/nord-vim&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;jaredgorski/spacecamp&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dracula/vim&amp;#39;&lt;/span&gt;, { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;as&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;dracula&amp;#39;&lt;/span&gt; }&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;embark-theme/vim&amp;#39;&lt;/span&gt;, { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;as&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;embark&amp;#39;&lt;/span&gt; }&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;morhetz/gruvbox&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fatih/vim-go&amp;#39;&lt;/span&gt;, { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;do&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:GoUpdateBinaries&amp;#39;&lt;/span&gt; } &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; go 插件 跳转函数定义， ctrl+o 返回, ctrl+i再次进入&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://github.com/joshdick/onedark.vim.git&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 目前最喜欢da。。&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Plug &amp;#39;luochen1990/rainbow&amp;#39; &amp;#34; 彩虹括号嘿嘿嘿&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tpope/vim-surround&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; ci&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tpope/vim-commentary&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; gcc&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Plug &amp;#39;prettier/vim-prettier&amp;#39;, { &amp;#39;do&amp;#39;: &amp;#39;yarn install&amp;#39; }&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;preservim/nerdtree&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mhinz/vim-startify&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Yggdroot/indentLine&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;neoclide/coc.nvim&amp;#39;&lt;/span&gt;, {&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;branch&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;release&amp;#39;&lt;/span&gt;} &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 哟西&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Plug &amp;#39;tweekmonster/gofmt.vim&amp;#39; &amp;#34; :w 格式化...&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tpope/vim-fugitive&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; :Git status, git支持...&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;vim-utils/vim-man&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; man vim...&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mbbill/undotree&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; UndotreeToggle 来切换，选择+回车 = 跳到那个undo&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sheerun/vim-polyglot&amp;#39;&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 扩展语言包， 支持小众语言高亮&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;junegunn/fzf&amp;#39;&lt;/span&gt;, { &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;do&amp;#39;&lt;/span&gt;: { -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fzf&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;install&lt;/span&gt;() } }&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;junegunn/fzf.vim&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;stsewd/fzf-checkout.vim&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Plug &amp;#39;tpope/vim-dispatch&amp;#39; &amp;#34; 通过 :Dispatch! xx 命令在vim内运行cmd&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; Plug &amp;#39;rust-lang/rust.vim&amp;#39; &amp;#34; rust插件&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;plug&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 使用Tab进行补全&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;inoremap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;silent&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;expr&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;TAB&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;      \ &lt;span style=&#34;color:#a6e22e&#34;&gt;pumvisible&lt;/span&gt;() ? &lt;span style=&#34;color:#a6e22e&#34;&gt;coc&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;_select_confirm&lt;/span&gt;() :&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;      \ &lt;span style=&#34;color:#a6e22e&#34;&gt;coc&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;expandableOrJumpable&lt;/span&gt;() ? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\&amp;lt;C-r&amp;gt;=coc#rpc#request(&amp;#39;doKeymap&amp;#39;, [&amp;#39;snippets-expand-jump&amp;#39;,&amp;#39;&amp;#39;])\&amp;lt;CR&amp;gt;&amp;#34;&lt;/span&gt; :&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;      \ &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;SID&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;check_back_space&lt;/span&gt;() ? &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\&amp;lt;TAB&amp;gt;&amp;#34;&lt;/span&gt; :&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;      \ &lt;span style=&#34;color:#a6e22e&#34;&gt;coc&lt;/span&gt;#&lt;span style=&#34;color:#a6e22e&#34;&gt;refresh&lt;/span&gt;()&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;! &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;check_back_space&lt;/span&gt;() &lt;span style=&#34;color:#a6e22e&#34;&gt;abort&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;) - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;return&lt;/span&gt; !&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt; || &lt;span style=&#34;color:#a6e22e&#34;&gt;getline&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#a6e22e&#34;&gt;col&lt;/span&gt; - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]  =~# &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\s&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endfunction&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mapleader&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;mapleader&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nnoremap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;silent&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;p&lt;/span&gt;&amp;gt; :&lt;span style=&#34;color:#a6e22e&#34;&gt;Files&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;CR&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nnoremap&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;silent&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;-&lt;span style=&#34;color:#a6e22e&#34;&gt;k&lt;/span&gt;&amp;gt; :&lt;span style=&#34;color:#a6e22e&#34;&gt;Buffers&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;CR&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nmap&lt;/span&gt; ,&lt;span style=&#34;color:#a6e22e&#34;&gt;v&lt;/span&gt; :&lt;span style=&#34;color:#a6e22e&#34;&gt;NERDTreeToggle&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;CR&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;nmap&lt;/span&gt; ,&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; :&lt;span style=&#34;color:#a6e22e&#34;&gt;NERDTreeFind&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;CR&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;coc_snippet_next&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;tab&amp;gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;coc_global_extensions&lt;/span&gt; = [&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  \ &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;coc-tsserver&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;  \ ]&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; 设置 上面的状态栏插件的主题&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;airline_theme&lt;/span&gt;=&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;luna&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; let g:rainbow_active = 1 &amp;#34; 打开彩虹括号&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; let g:indentLine_setColors = 0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; colorscheme spacecamp&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;colorscheme&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onedark&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;mio&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; colorscheme nord&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; colorscheme embark&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; colorscheme dracula&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; colorscheme gruvbox&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; set background=dark&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; hard time !&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt;:&lt;span style=&#34;color:#a6e22e&#34;&gt;hardtime_default_on&lt;/span&gt; = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; let g:gruvbox_contrast_dark = &amp;#39;medium&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34; highlight Pmenu ctermbg=238 gui=bold&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;viminfo-里的命令历史&#34;&gt;viminfo 里的命令历史&lt;/h3&gt;
&lt;p&gt;以下这些命令，是直接复制的 history 命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;vs l/solution.go
sp l/solution.go
!go test -timeout&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;3s -v c114/*
%s/TreeNode/Node/g &lt;span style=&#34;color:#75715e&#34;&gt;# 替换&lt;/span&gt;
%s/&lt;span style=&#34;color:#ae81ff&#34;&gt;\]&lt;/span&gt;/&lt;span style=&#34;color:#ae81ff&#34;&gt;\}&lt;/span&gt;/g &lt;span style=&#34;color:#75715e&#34;&gt;# 替换括号&lt;/span&gt;
%s/existWord/checkExist/g
!python3 inits.py &lt;span style=&#34;color:#ae81ff&#34;&gt;216&lt;/span&gt;
resize +10
CocInstall coc-json coc-tsserver
CocInstall coc-tsserver coc-html coc-css
Prettier
!go run % | more
PlugInstall
PlugUpgrade
CocConfig
!g++ client4.cc -o client
!node %
CocInstall coc-clangd coc-rls
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;老的 CocConfig&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;coc.preferences.formatOnSaveFiletypes&amp;quot;: [
    &amp;quot;javascript&amp;quot;,
    &amp;quot;javascriptreact&amp;quot;,
    &amp;quot;typescript&amp;quot;,
    &amp;quot;typescriptreact&amp;quot;
  ],
  &amp;quot;tsserver.formatOnType&amp;quot;: true,
  &amp;quot;coc.preferences.formatOnType&amp;quot;: true,
  &amp;quot;clangd.path&amp;quot;: &amp;quot;/Users/challenai/.config/coc/extensions/coc-clangd-data/install/11.0.0/clangd_11.0.0/bin/clangd&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;老的 Plug 列表&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;- Finishing ... Done!
- vim-polyglot: Already installed
- indentLine: Already installed
- vim-startify: Already installed
- fzf: Already installed
- fzf.vim: Already installed
- nord-vim: Already installed
- coc.nvim: Already installed
- vim-commentary: Already installed
- vim-hardtime: Already installed
- nerdtree: Already installed
- embark: Already installed
- gruvbox: Already installed
- vim-fugitive: Already installed
- vim-airline-themes: Already installed
- vim-surround: Already installed
- vim-man: Already installed
- dracula: Already installed
- vim-go: Already installed
- onedark.vim: Already installed
- vim-airline: Already installed
- fzf-checkout.vim: Already installed
- undotree: Already installed
- spacecamp: Already installed

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Art</title>
      <link>/posts/art/page/</link>
      <pubDate>Thu, 22 Apr 2021 07:48:16 +0800</pubDate>
      
      <guid>/posts/art/page/</guid>
      <description>  Blender 探索
  (tomigrate)色彩原理
  </description>
      <content>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/art/blender&#34;&gt;Blender 探索&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/art/color&#34;&gt;(tomigrate)色彩原理&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Blender探索</title>
      <link>/posts/art/blender/</link>
      <pubDate>Thu, 22 Apr 2021 07:48:16 +0800</pubDate>
      
      <guid>/posts/art/blender/</guid>
      <description>Blender 探索 一些经验   前置工作
编辑-偏好，设置语言为 English 或中文。快捷键映射，点击空格为搜索，而不是播放
  如何创建 5 角环
shift+A 选择圆环，然后不要点击，左下角参数设置段数为 5
  如何处理场景中的单个物品
使用/
  如何查看当前物品位置，旋转参数？
右上角的几个圆圈下面的小三角展开
  如何放大一个对象
s
  如何在立方体的某个面中心放一个小立方体
tab 切换编辑模式，3 切换面，选中该面，shift+s 定位游标到这里。tab 切回，shift+a 创建立方体，s 缩小。
  三个并排的立方体，模拟 1. 像天平一样，两边的立方体旋转，2. 3 个围绕一点转。3. 三个各自绕自己旋转
屏幕中间顶部有个局部和全局坐标系，右边那个就是参照点 1. 选围绕边界， 2. 选围绕游标，游标移到某处。 3. 旋转围绕物体原点
  4 个角色围绕某点，两两对面，如何拉远所有角色和圆心的距离
同上，全选角色。选择局部坐标系，即参考自己的 transform，gx 拉远即可。可以看到他们都沿着自己世界的 x 轴移动，而不是真实的 x 轴
  制作一个星球模型，星球上有很多环型山。即一个大球，上面有很多环
shift+a 创建球和环，环 s 缩小，点击屏幕中上吸附，吸附选项设置为面（项目中的元素、自动旋转），那么环就会自动旋转，吸附到球表面</description>
      <content>&lt;h2 id=&#34;blender-探索&#34;&gt;Blender 探索&lt;/h2&gt;
&lt;h3 id=&#34;一些经验&#34;&gt;一些经验&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;前置工作&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;编辑-偏好，设置语言为 English 或中文。快捷键映射，点击空格为搜索，而不是播放&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;如何创建 5 角环&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;shift+A 选择圆环，然后不要点击，左下角参数设置段数为 5&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;如何处理场景中的单个物品&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;使用/&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;如何查看当前物品位置，旋转参数？&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;右上角的几个圆圈下面的小三角展开&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;如何放大一个对象&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;s&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;如何在立方体的某个面中心放一个小立方体&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;tab 切换编辑模式，3 切换面，选中该面，shift+s 定位游标到这里。tab 切回，shift+a 创建立方体，s 缩小。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;三个并排的立方体，模拟 1. 像天平一样，两边的立方体旋转，2. 3 个围绕一点转。3. 三个各自绕自己旋转&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;屏幕中间顶部有个局部和全局坐标系，右边那个就是参照点 1. 选围绕边界， 2. 选围绕游标，游标移到某处。 3. 旋转围绕物体原点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;4 个角色围绕某点，两两对面，如何拉远所有角色和圆心的距离&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;同上，全选角色。选择局部坐标系，即参考自己的 transform，gx 拉远即可。可以看到他们都沿着自己世界的 x 轴移动，而不是真实的 x 轴&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;制作一个星球模型，星球上有很多环型山。即一个大球，上面有很多环&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;shift+a 创建球和环，环 s 缩小，点击屏幕中上吸附，吸附选项设置为面（项目中的元素、自动旋转），那么环就会自动旋转，吸附到球表面&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3d-角色模型参考&#34;&gt;3d 角色模型参考&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;../../vendor/images/anime.jpeg&#34; alt=&#34;动漫人物&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>HTTPS/SSL/TLS</title>
      <link>/posts/tech/https/</link>
      <pubDate>Thu, 22 Apr 2021 07:48:16 +0800</pubDate>
      
      <guid>/posts/tech/https/</guid>
      <description>HTTPS/SSL/TLS 需要使用加密的http连接，就需要证书和私钥 私钥服务器持有，证书(公钥)分发出去 然后公钥加密对称加密的秘钥(生成的一串随机数) 最后双方通信使用对称加密。两边都持有对称加密的秘钥
https证书生成： 1、生成RSA密钥的方法 openssl genrsa -des3 -out key.pem 2048 这个命令会生成一个2048位的密钥，同时有一个des3方法加密的密码，如果你不想要每次都输入密码，可以改成： openssl genrsa -out key.pem 2048 建议用2048位密钥，少于此可能会不安全或很快将不安全。 2、生成一个证书请求 openssl req -new -key key.pem -out cert.csr 这个命令将会生成一个证书请求，当然，用到了前面生成的密钥key.pem文件 这里将生成一个新的文件cert.csr，即一个证书请求文件，你可以拿着这个文件去数字证书颁发机构（即CA）申请一个数字证书。CA会给你一个新的文件cert.pem，那才是你的数字证书。 如果是自己做测试，那么证书的申请机构和颁发机构都是自己。就可以用下面这个命令来生成证书： openssl req -new -x509 -key key.pem -out cert.pem -days 1095 这个命令将用上面生成的密钥key.pem生成一个数字证书cert.pem 3、使用数字证书和密钥 有了key.pem和cert.pem文件后就可以在自己的程序中使用了，比如做一个加密通讯的服务器 上述是讲解的详情，如果我们要生成私钥用于测试本地https(该命令来自nodejs文档https部分):
openssl req -x509 -newkey rsa:2048 -nodes -sha256 -subj &amp;#39;/CN=localhost&amp;#39; \  -keyout key.pem -out cert.pem 然后将cert.pem(公钥)，key.pem(私钥)放到index.js或nginx.conf目录即可：
const http2 = require(&amp;#39;http2&amp;#39;); const fs = require(&amp;#39;fs&amp;#39;); const server = http2.</description>
      <content>&lt;h3 id=&#34;httpsssltls&#34;&gt;HTTPS/SSL/TLS&lt;/h3&gt;
&lt;p&gt;需要使用加密的http连接，就需要证书和私钥
私钥服务器持有，证书(公钥)分发出去
然后公钥加密对称加密的秘钥(生成的一串随机数)
最后双方通信使用对称加密。两边都持有对称加密的秘钥&lt;/p&gt;
&lt;h4 id=&#34;https证书生成&#34;&gt;https证书生成：&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;1、生成RSA密钥的方法 
openssl genrsa -des3 -out key.pem 2048 
这个命令会生成一个2048位的密钥，同时有一个des3方法加密的密码，如果你不想要每次都输入密码，可以改成： 
openssl genrsa -out key.pem 2048 
建议用2048位密钥，少于此可能会不安全或很快将不安全。 

2、生成一个证书请求 
openssl req -new -key key.pem -out cert.csr 
这个命令将会生成一个证书请求，当然，用到了前面生成的密钥key.pem文件 
这里将生成一个新的文件cert.csr，即一个证书请求文件，你可以拿着这个文件去数字证书颁发机构（即CA）申请一个数字证书。CA会给你一个新的文件cert.pem，那才是你的数字证书。 

如果是自己做测试，那么证书的申请机构和颁发机构都是自己。就可以用下面这个命令来生成证书： 
openssl req -new -x509 -key key.pem -out cert.pem -days 1095 
这个命令将用上面生成的密钥key.pem生成一个数字证书cert.pem 

3、使用数字证书和密钥 
有了key.pem和cert.pem文件后就可以在自己的程序中使用了，比如做一个加密通讯的服务器
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述是讲解的详情，如果我们要生成私钥用于测试本地https(该命令来自nodejs文档https部分):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;openssl req -x509 -newkey rsa:2048 -nodes -sha256 -subj &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/CN=localhost&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  -keyout key.pem -out cert.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后将cert.pem(公钥)，key.pem(私钥)放到index.js或nginx.conf目录即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http2&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http2&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;createSecureServer&lt;/span&gt;({
    &lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fs&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;readFileSync&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;key.pem&amp;#39;&lt;/span&gt;),
    &lt;span style=&#34;color:#a6e22e&#34;&gt;cert&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fs&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;readFileSync&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cert.pem&amp;#39;&lt;/span&gt;)
});
&lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;));

&lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;on&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;stream&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;headers&lt;/span&gt;) =&amp;gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;// 流是一个双工流。
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;respond&lt;/span&gt;({
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;content-type&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text/html; charset=utf-8&amp;#39;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:status&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;
    });
    &lt;span style=&#34;color:#a6e22e&#34;&gt;stream&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;end&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;h1&amp;gt;你好世界&amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;);
});

&lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;8443&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于nginx.conf，这里以http2为例，因为http2强制使用https:&lt;/p&gt;
&lt;p&gt;值得一提的是http2依然可以proxy到http1.1的服务器&lt;/p&gt;
&lt;p&gt;(因为http2解决了队头阻塞问题和二进制传输，所以只要客户端和网关间建立http2连接即可,不必内部完全是http2,nginx暂时持有http2 frame，最后组成http文本头传给服务器)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;server {
    listen       443 ssl http2;
    server_name  hostname.com;

    ssl_certificate   cert/cert.pem;
    ssl_certificate_key  cert/key.pem;

    location / {
        proxy_pass http://localhost:12345;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;chrome不受信任的连接问题&#34;&gt;chrome不受信任的连接问题&lt;/h4&gt;
&lt;p&gt;根据TLS(安全传输层)原理，客户端必须有证书。&lt;/p&gt;
&lt;p&gt;mac系统里，打开钥匙链app(keychain access)，然后file-&amp;gt;import item来导入cert.pem&lt;/p&gt;
&lt;p&gt;导入后，双击该证书，设置信任该证书。&lt;/p&gt;
&lt;p&gt;然后访问https://localhost即可。&lt;/p&gt;
&lt;h4 id=&#34;自动https支持auto-tls&#34;&gt;自动HTTPS支持：auto TLS&lt;/h4&gt;
&lt;p&gt;caddy&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Inspiration</title>
      <link>/posts/inspiration/page/</link>
      <pubDate>Thu, 22 Apr 2021 07:48:16 +0800</pubDate>
      
      <guid>/posts/inspiration/page/</guid>
      <description>  Asia Poem: Meng
  Asia Poem: Rain Watcher
  Justice 笔记
  艾风逸: 名字的故事
  (tomigrate)poem of cloudy weather: JP vs CN
  (tomigrate)traditional Chinese culture from Series ZhiFou
  (tomigrate)education
  </description>
      <content>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/inspiration/meng&#34;&gt;Asia Poem: Meng&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/inspiration/rain&#34;&gt;Asia Poem: Rain Watcher&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/inspiration/justice&#34;&gt;Justice 笔记&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/inspiration/name&#34;&gt;艾风逸: 名字的故事&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/inspiration/cloudy&#34;&gt;(tomigrate)poem of cloudy weather: JP vs CN&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/inspiration/zhifou&#34;&gt;(tomigrate)traditional Chinese culture from Series ZhiFou&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/inspiration/education&#34;&gt;(tomigrate)education&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Life</title>
      <link>/posts/life/page/</link>
      <pubDate>Thu, 22 Apr 2021 07:48:16 +0800</pubDate>
      
      <guid>/posts/life/page/</guid>
      <description>  vim 和我的配置
  Use Hugo Generate Blog
  (tomigrate)游戏:黎明杀机
  (tomigrate)游戏:风之旅人
  (tomigrate)关于感情
  </description>
      <content>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/life/vim&#34;&gt;vim 和我的配置&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/life/blog&#34;&gt;Use Hugo Generate Blog&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/life/deadbydaylight&#34;&gt;(tomigrate)游戏:黎明杀机&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/life/journey&#34;&gt;(tomigrate)游戏:风之旅人&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/life/love&#34;&gt;(tomigrate)关于感情&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Love</title>
      <link>/posts/life/love/</link>
      <pubDate>Thu, 22 Apr 2021 07:48:16 +0800</pubDate>
      
      <guid>/posts/life/love/</guid>
      <description> 呦呦鹿鸣，食野之苹，我有嘉宾，鼓瑟吹笙。
 </description>
      <content>&lt;blockquote&gt;
&lt;p&gt;呦呦鹿鸣，食野之苹，我有嘉宾，鼓瑟吹笙。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>Rust探索</title>
      <link>/posts/tech/rust/</link>
      <pubDate>Thu, 22 Apr 2021 07:48:16 +0800</pubDate>
      
      <guid>/posts/tech/rust/</guid>
      <description>install install according to rust-lang.org instructions
# install curl --proto &amp;#39;=https&amp;#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh # update rust rustup update # build/run/test cargo build/run/test # version, cargo is like npm or maven, used to manage deps, build project... cargo --version hello, world hello.rs
fn main() { println!(&amp;#34;hello, world&amp;#34;) } compile
rustc hello.rs -o hello.out ./hello.out vim plugin syntax highlighting/ formatting&amp;hellip;
Plug &amp;#39;rust-lang/rust.vim&amp;#39;auto complete :)
rustup component add rls rust-analysis rust-src :CocInstall coc-rls cargo hello cargo new xx cd xx cargo run simple http server actix web framework, to say the truth, it feels like a bit disgusting,</description>
      <content>&lt;h3 id=&#34;install&#34;&gt;install&lt;/h3&gt;
&lt;p&gt;install according to rust-lang.org instructions&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# install&lt;/span&gt;
curl --proto &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=https&amp;#39;&lt;/span&gt; --tlsv1.2 -sSf https://sh.rustup.rs | sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# update rust&lt;/span&gt;
rustup update
&lt;span style=&#34;color:#75715e&#34;&gt;# build/run/test&lt;/span&gt;
cargo build/run/test
&lt;span style=&#34;color:#75715e&#34;&gt;# version, cargo is like npm or maven, used to manage deps, build project...&lt;/span&gt;
cargo --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;hello-world&#34;&gt;hello, world&lt;/h3&gt;
&lt;p&gt;hello.rs&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    println&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello, world&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;compile&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;rustc hello.rs -o hello.out
./hello.out
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;vim-plugin&#34;&gt;vim plugin&lt;/h3&gt;
&lt;p&gt;syntax highlighting/ formatting&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-vimrc&#34; data-lang=&#34;vimrc&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Plug&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rust-lang/rust.vim&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;auto complete :)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;rustup component add rls rust-analysis rust-src
:CocInstall coc-rls
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;cargo-hello&#34;&gt;cargo hello&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cargo new xx
cd xx
cargo run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;simple-http-server&#34;&gt;simple http server&lt;/h3&gt;
&lt;p&gt;actix web framework,
to say the truth, it feels like a bit disgusting,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// initialize server
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[actix_web::main]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;std&lt;/span&gt;::io::Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    HttpServer::new(&lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; {
        App::new()
            .service(hello)
            .service(echo)
            .route(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/hey&amp;#34;&lt;/span&gt;, web::get().to(manual_hello))
    })
    .bind(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;127.0.0.1:8080&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;
    .run()
    .&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// request handler
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[get(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hello&lt;/span&gt;() -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;impl&lt;/span&gt; Responder {
    HttpResponse::Ok().body(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello world!&amp;#34;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I find another alternative: Rocket.
Oh, that&amp;rsquo;s what I want, It&amp;rsquo;s Rust version Spring.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# rust need nightly version of rust&lt;/span&gt;
rustup override set nightly
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mod&lt;/span&gt; other {
    &lt;span style=&#34;color:#75715e&#34;&gt;#[get(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/world&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;)]&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;world&lt;/span&gt;() -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&amp;#39;static &lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt; {
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, world!&amp;#34;&lt;/span&gt;
    }
}

&lt;span style=&#34;color:#75715e&#34;&gt;#[get(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/hello&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;)]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hello&lt;/span&gt;() -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&amp;#39;static &lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt; {
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, outside world!&amp;#34;&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; other::world;

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    rocket::ignite().mount(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/hello&amp;#34;&lt;/span&gt;, routes&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;[hello, world]);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;heading&#34;&gt;&lt;/h1&gt;
</content>
    </item>
    
    <item>
      <title>Tech</title>
      <link>/posts/tech/page/</link>
      <pubDate>Thu, 22 Apr 2021 07:48:16 +0800</pubDate>
      
      <guid>/posts/tech/page/</guid>
      <description>  有趣的算法题: 嵌套字段解析
  Rust 探索
  关于 HTTP/HTTPS
  Docker 笔记
  一个分布式数据库的设计和实现
  </description>
      <content>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/tech/embedfield&#34;&gt;有趣的算法题: 嵌套字段解析&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/tech/rust&#34;&gt;Rust 探索&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/tech/https&#34;&gt;关于 HTTP/HTTPS&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/tech/docker&#34;&gt;Docker 笔记&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;/posts/tech/kvstore&#34;&gt;一个分布式数据库的设计和实现&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>知否里看</title>
      <link>/posts/inspiration/zhifou/</link>
      <pubDate>Thu, 22 Apr 2021 07:48:16 +0800</pubDate>
      
      <guid>/posts/inspiration/zhifou/</guid>
      <description>zhi</description>
      <content>&lt;p&gt;zhi&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>色彩设计</title>
      <link>/posts/art/color/</link>
      <pubDate>Thu, 22 Apr 2021 07:48:16 +0800</pubDate>
      
      <guid>/posts/art/color/</guid>
      <description>Color </description>
      <content>&lt;h2 id=&#34;color&#34;&gt;Color&lt;/h2&gt;
</content>
    </item>
    
    <item>
      <title>谈教育</title>
      <link>/posts/inspiration/education/</link>
      <pubDate>Thu, 22 Apr 2021 07:48:16 +0800</pubDate>
      
      <guid>/posts/inspiration/education/</guid>
      <description>education
教育是什么 教育是经验和知识的传播
目标  理解  抽象   思考  独立思考 分析和决策   基本知识 兴趣 道德和共识 特定技能 对现实世界的认知是接近正确的  教育的误区  认同 计算 技能 记忆 竞争 特定基本知识  如何分流? 是否应该义务教育? 教育是什么 2: 我们身处何方 如何教育 区分教育 是否应该有教无类? 重新定义教育 教育提供给个体认知世界和持续学习的能力
关键的是，他能不能学习他想学习的，而不是他学没学会规定他学的。
重新审视教育过程 再谈教育公平 </description>
      <content>&lt;p&gt;education&lt;/p&gt;
&lt;h2 id=&#34;教育是什么&#34;&gt;教育是什么&lt;/h2&gt;
&lt;p&gt;教育是经验和知识的传播&lt;/p&gt;
&lt;h3 id=&#34;目标&#34;&gt;目标&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;理解
&lt;ul&gt;
&lt;li&gt;抽象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;思考
&lt;ul&gt;
&lt;li&gt;独立思考&lt;/li&gt;
&lt;li&gt;分析和决策&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基本知识&lt;/li&gt;
&lt;li&gt;兴趣&lt;/li&gt;
&lt;li&gt;道德和共识&lt;/li&gt;
&lt;li&gt;特定技能&lt;/li&gt;
&lt;li&gt;对现实世界的认知是接近正确的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;教育的误区&#34;&gt;教育的误区&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;认同&lt;/li&gt;
&lt;li&gt;计算&lt;/li&gt;
&lt;li&gt;技能&lt;/li&gt;
&lt;li&gt;记忆&lt;/li&gt;
&lt;li&gt;竞争&lt;/li&gt;
&lt;li&gt;特定基本知识&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;如何分流&#34;&gt;如何分流?&lt;/h3&gt;
&lt;h3 id=&#34;是否应该义务教育&#34;&gt;是否应该义务教育?&lt;/h3&gt;
&lt;h3 id=&#34;教育是什么-2-我们身处何方&#34;&gt;教育是什么 2: 我们身处何方&lt;/h3&gt;
&lt;h3 id=&#34;如何教育&#34;&gt;如何教育&lt;/h3&gt;
&lt;h2 id=&#34;区分教育&#34;&gt;区分教育&lt;/h2&gt;
&lt;h3 id=&#34;是否应该有教无类&#34;&gt;是否应该有教无类?&lt;/h3&gt;
&lt;h2 id=&#34;重新定义教育&#34;&gt;重新定义教育&lt;/h2&gt;
&lt;p&gt;教育提供给个体认知世界和持续学习的能力&lt;/p&gt;
&lt;p&gt;关键的是，他能不能学习他想学习的，而不是他学没学会规定他学的。&lt;/p&gt;
&lt;h3 id=&#34;重新审视教育过程&#34;&gt;重新审视教育过程&lt;/h3&gt;
&lt;h3 id=&#34;再谈教育公平&#34;&gt;再谈教育公平&lt;/h3&gt;
</content>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Thu, 22 Apr 2021 07:18:58 +0800</pubDate>
      
      <guid>/about/</guid>
      <description>Hi, my name is Challen.
I&amp;rsquo;m currently a software engineer in Shanghai, China.
connect me:
gmail: fengyiai@gmail.com
leetcode: https://leetcode.com/challenai/
github: https://github.com/ChallenAi
blog: https://challenai.github.io/
medium: https://challenai.medium.com/
twitter: https://twitter.com/challenai</description>
      <content>&lt;p&gt;Hi, my name is Challen.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m currently a software engineer in Shanghai, China.&lt;/p&gt;
&lt;p&gt;connect me:&lt;/p&gt;
&lt;p&gt;gmail: &lt;a href=&#34;mailto:fengyiai@gmail.com&#34;&gt;fengyiai@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;leetcode: &lt;a href=&#34;https://leetcode.com/challenai/&#34;&gt;https://leetcode.com/challenai/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;github: &lt;a href=&#34;https://github.com/ChallenAi&#34;&gt;https://github.com/ChallenAi&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;blog: &lt;a href=&#34;https://challenai.github.io/&#34;&gt;https://challenai.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;medium: &lt;a href=&#34;https://challenai.medium.com/&#34;&gt;https://challenai.medium.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;twitter: &lt;a href=&#34;https://twitter.com/challenai&#34;&gt;https://twitter.com/challenai&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Project</title>
      <link>/project/</link>
      <pubDate>Thu, 22 Apr 2021 07:18:58 +0800</pubDate>
      
      <guid>/project/</guid>
      <description>https://github.com/ChallenAi</description>
      <content>&lt;p&gt;&lt;a href=&#34;https://github.com/ChallenAi&#34;&gt;https://github.com/ChallenAi&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Tags</title>
      <link>/tagslist/</link>
      <pubDate>Thu, 22 Apr 2021 07:18:58 +0800</pubDate>
      
      <guid>/tagslist/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title></title>
      <link>/posts/inspiration/cloudy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/inspiration/cloudy/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title></title>
      <link>/posts/inspiration/dance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/inspiration/dance/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title></title>
      <link>/posts/inspiration/justice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/inspiration/justice/</guid>
      <description>justice 电车难题  驾驶一辆电车，前方岔道。转弯会撞死 1 人拯救 5 人；不转会撞死 5 人拯救一人。 不按。理由：我不按，那 1 个人不会因我而死 ，1 人的生命不比 5 个人更轻 作为旁观者，看见电车刹不住要撞到人。推身边的胖子减速火车可以救 5 人，胖子因你而死，推或不推？ 不推。毫无疑问我不会推胖子。理由同上 我是医生，可以花一天救 5 个轻伤患者，或者救 1 个重伤患者，我会救谁？ 救 5 个。当我做出这个决定的时候，我凭借的是常识和思想的惯性，没有什么理由（因为我没有深入思考）。 我是医生，有 5 个人分别需要心脏，肺，肾脏等来移植，隔壁有个健康的人在打盹，我会不会杀害健康的人救其余 5 个（这里暗示了你救人不需要付法律责任）。 不会。我不想主动用一个人的生命去换 5 个人的生命。我的决策导致了 5 个人的死亡，但本质上，他们的死亡和生存并没有因我而改变。当有一个人因为我由生变为死，我称之为剥夺，否则，我不认为我剥夺了任何人的生命。  结果主义道德伦理(Consequentialist Moral Reasioning) 道德与否取决于行为的结果，结果好则道德。比如，认为救 5 个人比救 1 个人好。
结果主义最具有影响力的例子是功利主义(utilitarianism)，被 Jeremy Bentham(边沁)提出。
功利主义 功利主义：最大化群体幸福(maximize untility)。总幸福=总快乐-总苦难(类似成本-收益分析)。
例子：捷克烟草公司鼓励吸烟，通过成本效益分析得出，鼓励吸烟有利于捷克政府。模型中，更多吸烟导致老人死亡更早，住房成本下降(死了就不用住房了)和烟草税导致财政收入增加-增加的医疗成本 为正数。
例子 2：没有为汽车建立后挡板，因为每辆出厂车成本 x 车辆数(省去所有车后挡板的总成本)-车祸概率 x 人数 x 赔偿金额(或每个生命的价值) 为正数。
绝对主义道德伦理(Categorical Moral Reasioning) 是否道德是由明确的职责和权力来定义的。比如认为杀人就是不道德的，不管结果是怎样，比如海难吃人事件，三个船员为了活下去而杀害食用一个弱小的船员。
最著名的绝对主义哲学家是 Immanuel Kant(德国 18 世纪)。</description>
      <content>&lt;h1 id=&#34;justice&#34;&gt;justice&lt;/h1&gt;
&lt;h2 id=&#34;电车难题&#34;&gt;电车难题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;驾驶一辆电车，前方岔道。转弯会撞死 1 人拯救 5 人；不转会撞死 5 人拯救一人。
不按。理由：我不按，那 1 个人不会因我而死 ，1 人的生命不比 5 个人更轻&lt;/li&gt;
&lt;li&gt;作为旁观者，看见电车刹不住要撞到人。推身边的胖子减速火车可以救 5 人，胖子因你而死，推或不推？
不推。毫无疑问我不会推胖子。理由同上&lt;/li&gt;
&lt;li&gt;我是医生，可以花一天救 5 个轻伤患者，或者救 1 个重伤患者，我会救谁？
救 5 个。当我做出这个决定的时候，我凭借的是常识和思想的惯性，没有什么理由（因为我没有深入思考）。&lt;/li&gt;
&lt;li&gt;我是医生，有 5 个人分别需要心脏，肺，肾脏等来移植，隔壁有个健康的人在打盹，我会不会杀害健康的人救其余 5 个（这里暗示了你救人不需要付法律责任）。
不会。我不想主动用一个人的生命去换 5 个人的生命。我的决策导致了 5 个人的死亡，但本质上，他们的死亡和生存并没有因我而改变。当有一个人因为我由生变为死，我称之为剥夺，否则，我不认为我剥夺了任何人的生命。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;结果主义道德伦理consequentialist-moral-reasioning&#34;&gt;结果主义道德伦理(Consequentialist Moral Reasioning)&lt;/h2&gt;
&lt;p&gt;道德与否取决于行为的结果，结果好则道德。比如，认为救 5 个人比救 1 个人好。&lt;/p&gt;
&lt;p&gt;结果主义最具有影响力的例子是功利主义(utilitarianism)，被 Jeremy Bentham(边沁)提出。&lt;/p&gt;
&lt;h3 id=&#34;功利主义&#34;&gt;功利主义&lt;/h3&gt;
&lt;p&gt;功利主义：最大化群体幸福(maximize untility)。总幸福=总快乐-总苦难(类似成本-收益分析)。&lt;/p&gt;
&lt;p&gt;例子：捷克烟草公司鼓励吸烟，通过成本效益分析得出，鼓励吸烟有利于捷克政府。模型中，更多吸烟导致老人死亡更早，住房成本下降(死了就不用住房了)和烟草税导致财政收入增加-增加的医疗成本 为正数。&lt;/p&gt;
&lt;p&gt;例子 2：没有为汽车建立后挡板，因为每辆出厂车成本 x 车辆数(省去所有车后挡板的总成本)-车祸概率 x 人数 x 赔偿金额(或每个生命的价值) 为正数。&lt;/p&gt;
&lt;h2 id=&#34;绝对主义道德伦理categorical-moral-reasioning&#34;&gt;绝对主义道德伦理(Categorical Moral Reasioning)&lt;/h2&gt;
&lt;p&gt;是否道德是由明确的职责和权力来定义的。比如认为杀人就是不道德的，不管结果是怎样，比如海难吃人事件，三个船员为了活下去而杀害食用一个弱小的船员。&lt;/p&gt;
&lt;p&gt;最著名的绝对主义哲学家是 Immanuel Kant(德国 18 世纪)。&lt;/p&gt;
&lt;h2 id=&#34;提示&#34;&gt;提示&lt;/h2&gt;
&lt;p&gt;什么是伦理?伦理就是 reasioning，即我们认为一件事的归因。道德伦理就是我们判断一个行为是否道德的归因，我们如何界定一个行为是否道德，也即我们如何定义道德，道德本身是什么。&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title></title>
      <link>/posts/life/deadbydaylight/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/life/deadbydaylight/</guid>
      <description>d</description>
      <content>&lt;p&gt;d&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title></title>
      <link>/posts/life/journey/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/life/journey/</guid>
      <description>j</description>
      <content>&lt;p&gt;j&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title></title>
      <link>/posts/tech/docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/posts/tech/docker/</guid>
      <description>docker 工作流 编写 Dockerfile -&amp;gt; 构建新镜像 build -&amp;gt; run -&amp;gt; stop -&amp;gt; rm
构建新镜像 docker build -t statusbarimg . 启动容器 -d 后台， -p 暴露给外部的(宿主):内部监听的端口(容器) &amp;ndash;name 别名
docker run --name statusbarcontainer -d -p 80:8000 statusbarimg 交互模式启动 docker run -it --name statusbarcontainer -p 80:8000 statusbarimg 启动/停止/重启 docker start/stop/restart statusbarcontainer/container_id 删除容器 docker rm statusbarcontainer 删除镜像 docker rmi 连接容器 link db:db 连接到名为 db 的 容器上，并且用 db 指代该容器 -e DATABASE_HOST=db 将环境变量 DATABASE_HOST 设置为 db
docker run -it -p 8123:8123 --link db:db -e DATABASE_HOST=DB users-service 在 xx 容器中执行命令 docker exec statusbarimg cat /etc/hosts 关闭 docker kill container_id 查看容器 docker ps # -l(最近一次运行的)/-a(所有的) 查看镜像 注意，运行着或运行过的镜像为容器，删镜像要先删容器，包括运行过的, 流： ps -a 看容器 id -&amp;gt; rm 删容器 -&amp;gt; images 看镜像 -&amp;gt; 删镜像</description>
      <content>&lt;h2 id=&#34;docker&#34;&gt;docker&lt;/h2&gt;
&lt;h3 id=&#34;工作流&#34;&gt;工作流&lt;/h3&gt;
&lt;p&gt;编写 Dockerfile -&amp;gt; 构建新镜像 build -&amp;gt; run -&amp;gt; stop -&amp;gt; rm&lt;/p&gt;
&lt;h3 id=&#34;构建新镜像&#34;&gt;构建新镜像&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker build -t statusbarimg .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;启动容器&#34;&gt;启动容器&lt;/h3&gt;
&lt;p&gt;-d 后台， -p 暴露给外部的(宿主):内部监听的端口(容器) &amp;ndash;name 别名&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run --name statusbarcontainer -d -p 80:8000 statusbarimg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;交互模式启动&#34;&gt;交互模式启动&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run -it --name statusbarcontainer -p 80:8000 statusbarimg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;启动停止重启&#34;&gt;启动/停止/重启&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker start/stop/restart statusbarcontainer/container_id
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;删除容器&#34;&gt;删除容器&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker rm statusbarcontainer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;删除镜像&#34;&gt;删除镜像&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker rmi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;连接容器&#34;&gt;连接容器&lt;/h3&gt;
&lt;p&gt;link db:db 连接到名为 db 的 容器上，并且用 db 指代该容器 -e DATABASE_HOST=db 将环境变量 DATABASE_HOST 设置为 db&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run -it -p 8123:8123 --link db:db -e DATABASE_HOST&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;DB users-service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;在-xx-容器中执行命令&#34;&gt;在 xx 容器中执行命令&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker exec statusbarimg cat /etc/hosts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;关闭&#34;&gt;关闭&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker kill container_id
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;查看容器&#34;&gt;查看容器&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker ps &lt;span style=&#34;color:#75715e&#34;&gt;# -l(最近一次运行的)/-a(所有的)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;查看镜像&#34;&gt;查看镜像&lt;/h3&gt;
&lt;p&gt;注意，运行着或运行过的镜像为容器，删镜像要先删容器，包括运行过的, 流： ps -a 看容器 id -&amp;gt; rm 删容器 -&amp;gt; images 看镜像 -&amp;gt; 删镜像&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker images
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;拉取推送搜索&#34;&gt;拉取/推送/搜索&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker pull/push/search
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;tag&#34;&gt;tag&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker tag 195eb90b5349 seanlook/ubuntu:rm_test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;提交对-image-的改动没理解具体流&#34;&gt;提交对 image 的改动(没理解具体流)&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;some tools installed&amp;#34;&lt;/span&gt; fcbd0a5348ca seanlook/ubuntu:14.10_tutorial
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;进入正在后台运行的容器使用-attach-后-exit-会导致容器关闭&#34;&gt;进入正在后台运行的容器(使用 attach 后 exit 会导致容器关闭)&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker exec -it 6057024435c4 /bin/sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其他参考:http://blog.csdn.net/permike/article/details/51879578&lt;/p&gt;
&lt;h3 id=&#34;复制文件到容器&#34;&gt;复制文件到容器&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker cp  ./peatio cf152a690090:/root
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;dockerfile-示例&#34;&gt;.Dockerfile 示例&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 设置基础镜像 和 维护者&lt;/span&gt;

FROM daocloud.io/node:8

MAINTAINER me@yanbingbing.com

&lt;span style=&#34;color:#75715e&#34;&gt;# 设置env环境&lt;/span&gt;

ENV HTTP_PORT &lt;span style=&#34;color:#ae81ff&#34;&gt;8000&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 设置工作目录 和 复制本地镜像到容器中&lt;/span&gt;

COPY . /app

WORKDIR /app

npm install

RUN npm install --registry&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;https://registry.npm.taobao.org

&lt;span style=&#34;color:#75715e&#34;&gt;# 暴露的端口&lt;/span&gt;

EXPOSE &lt;span style=&#34;color:#ae81ff&#34;&gt;8000&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 命令&lt;/span&gt;

CMD &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;npm&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;start&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;docker-composer&#34;&gt;Docker Composer&lt;/h3&gt;
&lt;p&gt;Docker Composer 允许用户创建一个文件，在其中定义系统里的每个容器，容器间的关系，并且构建或者运行它们。&lt;/p&gt;
&lt;p&gt;就是一下子跑数据库，app 和 nginx,并排好他们的连接关系，启动顺序，自动执行&lt;/p&gt;
&lt;h3 id=&#34;docker-composer-工作流&#34;&gt;Docker Composer 工作流&lt;/h3&gt;
&lt;p&gt;写 docker-compose.yml -&amp;gt; build -&amp;gt; up -&amp;gt; down&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker-compose build

docker-compose up/down
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;docker-网络互联&#34;&gt;Docker 网络互联&lt;/h3&gt;
&lt;p&gt;docker run 里的&amp;ndash;network 选项有 bridge,host,自定义的名字等
同一个 network 下面可以互联，默认是 bridge，自定义的名字就像一个 namespace 一样，可以直接相互连接。&lt;/p&gt;
&lt;p&gt;比如，在 connected 这个网络空间中，运行容器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run -d -p 3001:3001 --network connected --name post post
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
  </channel>
</rss>
